{"version":3,"sources":["engine/types.ts","controller/adapters/rest.tsx","controller/types.ts","pages/game/ControllerCreator.tsx","engine/utils.ts","pages/game/Run.tsx","engine/game.ts","store/index.ts","pages/game/Setup.tsx","pages/game/GameRunner.tsx","store/download.ts","pages/game/Summary.tsx","pages/Home.tsx","pages/parts/Content.tsx","pages/parts/Footer.tsx","pages/parts/Header.tsx","pages/Tester.tsx","viewer/Canvas.tsx","viewer/Snapshot.tsx","viewer/Viewer.tsx","pages/Viewer.tsx","App.tsx","index.tsx"],"names":["GameResult","Move","headers","RestController","url","init","payload","a","axios","post","response","data","update","state","playerNumber","params","end","this","RestControllerFactory","Selector","onChange","onChangeCallback","useCallback","e","target","value","Item","label","prefix","GlobalOutlined","create","isController","controller","availableFactories","ControllerCreator","onControllerChange","onNext","useState","factoriesWithID","setFactoriesWithID","controllers","useMemo","selectorChange","pos","factory","filter","selectorFields","map","key","style","display","align","type","icon","DeleteOutlined","onClick","undefined","selectorCreateButtons","PlusOutlined","uniqueId","title","placement","disabled","length","RunStage","randomPos","bounds","Math","floor","random","gameHistorySummarise","history","lastFrame","meta","winnerCount","playerAlive","p","result","TIMEOUT","WINNER","DRAW","winner","findIndex","ticks","h","omit","timeStamp","Date","toISOString","tickCount","defaultOptions","gridSize","maxTicks","Game","options","onGameTick","gameState","controllersReady","console","log","initState","Array","fill","Promise","all","c","i","gameId","playerCount","every","r","Error","JSON","stringify","allStates","tick","copy","cloneDeep","push","newState","positions","lastMoves","food","uuidv4","uniquePos","poss","controllerMoves","apply","oldState","forEach","move","player","currentHead","moveVec","NORTH","SOUTH","EAST","WEST","moveToVector2d","newHead","some","x","y","pop","unshift","Title","Typography","StoreKeys","Run","props","onTickUpdate","tickProgress","round","setState","onCancel","onPrev","stateUpdate","g","runStage","game","CONTROLLER_INIT","initControllers","then","GAME_RUN","catch","err","ERROR_STATE","errorTitle","errorDesc","message","run","gameComplete","GAME_OVER","statusMessage","level","description","showIcon","UNSET","_","prevState","body","progressStatus","direction","width","justifyContent","alignItems","percent","status","size","danger","React","Component","GameSetup","onConfigChange","setGridSize","setMaxTicks","changeCallback","onMaxTicksChange","onGridSizeChange","useEffect","min","max","defaultValue","SetupStage","getHistories","histories","store","get","HISTORIES","Object","values","sort","b","valueOf","createDownloadHref","gameHistory","jsonBlob","Blob","href","URL","createObjectURL","download","Panel","Collapse","Paragraph","Summary","set","addHistory","downloadProps","TrophyOutlined","MehOutlined","HourglassOutlined","to","EyeOutlined","DownloadOutlined","header","Step","Steps","GameRunner","CONTROLLER_CREATOR","currentStage","setCurrentStage","setControllers","setOptions","setGameHistory","creatorCallback","completeCallback","nextCallback","SUMMARY","prevCallback","current","GAME_SETUP","PLAYING","HomePage","Content","Layout","ContentPart","className","children","Footer","FooterPart","Header","HeaderPart","theme","mode","TabPane","Tabs","dummyId","sampleIniData","sampleStateData","ControllerTesterPage","setController","setResponse","sendData","setSendData","loaderCallback","gameIniButton","stateSendButton","defaultActiveKey","tab","gutter","span","CANVAS_SIZE","drawPart","ctx","partSize","colour","fillStyle","fillRect","Canvas","canvasRef","useRef","useLayoutEffect","canvas","getContext","clearRect","strokeRect","clearCanvas","snake","drawSnake","height","ref","StateSnapshot","frame","playerData","name","alive","lastMove","position","columns","dataIndex","render","CheckCircleOutlined","CloseCircleOutlined","ellipsis","dataSource","pagination","expandable","expandedRowRender","record","margin","Viewer","setTick","sliderChange","justify","marginLeft","marginRight","ViewerPage","reverse","savedGames","setSavedGames","loadedHistory","setLoadedHistory","query","URLSearchParams","useLocation","search","id","selected","find","error","sorter","compare","multiple","toString","localeCompare","color","humanDate","rest","removeHistory","pageSize","showTotal","total","App","exact","path","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.33657d6e.chunk.js","sourcesContent":["export type GameOptions = {\r\n  gridSize: number;\r\n  maxTicks: number;\r\n};\r\n\r\nexport enum GameResult {\r\n  DRAW = \"DRAW\",\r\n  WINNER = \"WINNER\",\r\n  TIMEOUT = \"TIMEOUT\",\r\n}\r\n\r\nexport type MetalessGameState = Omit<GameState, \"meta\">;\r\nexport type GameHistory = {\r\n  tickCount: number;\r\n  ticks: MetalessGameState[];\r\n  winner: number;\r\n  result: GameResult;\r\n  gridSize: number;\r\n  playerCount: number;\r\n  gameId: string;\r\n  timeStamp: string;\r\n};\r\n\r\nexport type GameOptionsOptionals = {};\r\n\r\nexport enum Move {\r\n  NORTH = \"N\",\r\n  SOUTH = \"S\",\r\n  EAST = \"E\",\r\n  WEST = \"W\",\r\n}\r\n\r\nexport type Pos = [number, number];\r\n\r\nexport type GameState = {\r\n  tick: number;\r\n  positions: Array<Pos[]>;\r\n  food: Pos[];\r\n  playerAlive: boolean[];\r\n  lastMoves: Move[];\r\n  meta: {\r\n    gridSize: number;\r\n    playerCount: number;\r\n    gameId: string;\r\n  };\r\n};\r\n","import { Form, Input } from \"antd\";\r\nimport axios from \"axios\";\r\nimport React, { useCallback } from \"react\";\r\nimport { GlobalOutlined } from \"@ant-design/icons\";\r\nimport { GameState } from \"../../engine/types\";\r\nimport { Controller, ControllerFactory, ControllerSelector, InitPayload } from \"../types\";\r\n\r\nconst headers = { \"Access-Control-Allow-Origin\": \"*\" };\r\n\r\nexport class RestController implements Controller {\r\n  private url: string;\r\n\r\n  constructor(url: string) {\r\n    this.url = url;\r\n  }\r\n\r\n  init = async (payload: InitPayload) => {\r\n    const response = await axios.post(this.url, payload, { headers });\r\n    return response.data;\r\n  };\r\n\r\n  update = async (state: GameState, playerNumber?: number) => {\r\n    const params = { playerNumber };\r\n    const response = await axios.post(this.url, state, { headers, params });\r\n    return response.data;\r\n  };\r\n\r\n  end = async (state: GameState) => {\r\n    await axios.post(this.url, state, { headers });\r\n  };\r\n}\r\n\r\nexport const RestControllerSelector: ControllerSelector = ({ onChange }) => {\r\n  const onChangeCallback = useCallback(\r\n    (e) => {\r\n      if (onChange) {\r\n        onChange(e.target.value);\r\n      }\r\n    },\r\n    [onChange]\r\n  );\r\n  return (\r\n    <Form.Item label=\"Address\">\r\n      <Input prefix={<GlobalOutlined />} onChange={onChangeCallback} />\r\n    </Form.Item>\r\n  );\r\n};\r\n\r\nexport const RestControllerFactory: ControllerFactory = {\r\n  Selector: RestControllerSelector,\r\n  create: (value) => new RestController(value),\r\n  label: \"REST\",\r\n};\r\n","import React from \"react\";\r\nimport { GameState, Move } from \"../engine/types\";\r\n\r\nexport type InitPayload = {\r\n  gameId: string;\r\n  gridSize: number;\r\n  playerCount: number;\r\n  playerNumber: number;\r\n};\r\n\r\nexport interface Controller {\r\n  init: (initPayload: InitPayload) => Promise<void>;\r\n  update: (state: GameState, playerNumber?: number) => Promise<Move>;\r\n  end: (state: GameState) => Promise<void>;\r\n}\r\n\r\nexport type ControllerSelector =\r\n  React.FunctionComponent<ControllerSelectorProps>;\r\n\r\nexport interface ControllerFactory {\r\n  Selector: ControllerSelector;\r\n  create: (value: string) => Controller;\r\n  label: string;\r\n}\r\n\r\nexport type ControllerSelectorProps = {\r\n  onChange?: (value: string) => void;\r\n};\r\n\r\nexport const isController = (\r\n  controller: Controller | undefined\r\n): controller is Controller => {\r\n  return !!controller;\r\n};\r\n","import { Button, Divider, Form, Space, Tooltip } from \"antd\";\r\nimport { uniqueId } from \"lodash\";\r\nimport React, { useCallback, useMemo, useState } from \"react\";\r\nimport { DeleteOutlined, PlusOutlined } from \"@ant-design/icons\";\r\nimport { RestControllerFactory } from \"../../controller/adapters/rest\";\r\nimport { Controller, ControllerFactory, isController } from \"../../controller/types\";\r\n\r\nexport type ControllerCreatorProps = {\r\n  onControllerChange: (controllers: Controller[]) => void;\r\n  onNext: () => void;\r\n};\r\n\r\nconst availableFactories: ControllerFactory[] = [RestControllerFactory];\r\n\r\nexport const ControllerCreator: React.FunctionComponent<ControllerCreatorProps> =\r\n  ({ onControllerChange, onNext }) => {\r\n    const [factoriesWithID, setFactoriesWithID] = useState<\r\n      Array<{ key: string; factory: ControllerFactory }>\r\n    >([]);\r\n    const controllers: Array<Controller | undefined> = useMemo(() => [], []);\r\n\r\n    const selectorChange = useCallback(\r\n      (pos) => (value: string) => {\r\n        controllers[pos] = factoriesWithID[pos].factory.create(value);\r\n        onControllerChange(controllers.filter(isController));\r\n      },\r\n      [onControllerChange, controllers, factoriesWithID]\r\n    );\r\n\r\n    const selectorFields = useMemo(\r\n      () =>\r\n        factoriesWithID.map(({ key, factory }, pos) => (\r\n          <Space style={{ display: \"flex\" }} align=\"baseline\" key={key}>\r\n            <factory.Selector onChange={selectorChange(pos)} />\r\n            <Button\r\n              type=\"text\"\r\n              icon={<DeleteOutlined />}\r\n              onClick={() => {\r\n                setFactoriesWithID(\r\n                  factoriesWithID.filter(({ key: k }) => k !== key)\r\n                );\r\n                controllers[pos] = undefined;\r\n                onControllerChange(controllers.filter(isController));\r\n              }}\r\n            />\r\n          </Space>\r\n        )),\r\n      [\r\n        factoriesWithID,\r\n        setFactoriesWithID,\r\n        controllers,\r\n        selectorChange,\r\n        onControllerChange,\r\n      ]\r\n    );\r\n\r\n    const selectorCreateButtons = useMemo(() => {\r\n      return availableFactories.map((factory, pos) => {\r\n        return (\r\n          <Button\r\n            key={pos}\r\n            type=\"dashed\"\r\n            icon={<PlusOutlined />}\r\n            onClick={() => {\r\n              setFactoriesWithID([\r\n                ...factoriesWithID,\r\n                { key: uniqueId(factory.label), factory },\r\n              ]);\r\n            }}\r\n          >\r\n            Add {factory.label} controller\r\n          </Button>\r\n        );\r\n      });\r\n    }, [factoriesWithID, setFactoriesWithID]);\r\n\r\n    return (\r\n      <>\r\n        <Form>{selectorFields}</Form>\r\n        <Space>{selectorCreateButtons}</Space>\r\n        <Divider />\r\n        <Tooltip\r\n          title=\"You must specifiy at least 2 controllers\"\r\n          placement=\"right\"\r\n        >\r\n          <Button\r\n            type=\"primary\"\r\n            onClick={onNext}\r\n            disabled={controllers.length < 2}\r\n          >\r\n            Next\r\n          </Button>\r\n        </Tooltip>\r\n      </>\r\n    );\r\n  };\r\n","import { omit } from \"lodash\";\r\nimport { GameHistory, GameResult, GameState, Move, Pos } from \"./types\";\r\n\r\nexport const randomPos = (bounds: number): Pos => {\r\n  return [\r\n    Math.floor(Math.random() * bounds),\r\n    Math.floor(Math.random() * bounds),\r\n  ];\r\n};\r\n\r\nexport const moveToVector2d = (move: Move): [number, number] => {\r\n  const vecs: { [key: string]: [number, number] } = {\r\n    [Move.NORTH]: [0, -1],\r\n    [Move.SOUTH]: [0, 1],\r\n    [Move.EAST]: [1, 0],\r\n    [Move.WEST]: [-1, 0],\r\n  };\r\n  return vecs[move];\r\n};\r\n\r\nexport const withinBounds = (pos: Pos, bounds: number): boolean => {\r\n  return pos.every((p) => p >= 0 && p < bounds);\r\n};\r\n\r\nexport const gameHistorySummarise = (history: GameState[]): GameHistory => {\r\n  const lastFrame = history[history.length - 1];\r\n  const meta = lastFrame.meta;\r\n  const winnerCount = lastFrame.playerAlive.filter((p) => p).length;\r\n  const result =\r\n    winnerCount > 1\r\n      ? GameResult.TIMEOUT\r\n      : winnerCount === 1\r\n      ? GameResult.WINNER\r\n      : GameResult.DRAW;\r\n\r\n  const winner = lastFrame.playerAlive.findIndex((p) => p);\r\n  const ticks = history.map((h) => omit(h, [\"meta\"]));\r\n  const timeStamp = new Date().toISOString();\r\n  return {\r\n    ...meta,\r\n    tickCount: ticks.length,\r\n    ticks,\r\n    winner,\r\n    timeStamp,\r\n    result,\r\n  };\r\n};\r\n","import { Alert, Button, Progress, ProgressProps, Space, Typography } from \"antd\";\r\nimport React from \"react\";\r\nimport { Controller } from \"../../controller/types\";\r\nimport { Game } from \"../../engine/game\";\r\nimport { GameHistory, GameOptions } from \"../../engine/types\";\r\n\r\nconst { Title } = Typography;\r\n\r\nexport type RunProps = {\r\n  controllers?: Controller[];\r\n  onPrev: () => void;\r\n  onNext: () => void;\r\n  options?: GameOptions;\r\n  gameComplete: (history: GameHistory) => void;\r\n};\r\n\r\nexport enum RunStage {\r\n  UNSET,\r\n  CONTROLLER_INIT,\r\n  ERROR_STATE,\r\n  GAME_RUN,\r\n  GAME_OVER,\r\n}\r\n\r\nexport type RunState = {\r\n  errorTitle?: string;\r\n  errorDesc?: string;\r\n  game?: Game;\r\n  runStage: RunStage;\r\n  history?: GameHistory;\r\n  tickProgress: number;\r\n};\r\n\r\nexport class Run extends React.Component<RunProps, RunState> {\r\n  constructor(props: RunProps) {\r\n    super(props);\r\n    this.state = {\r\n      runStage: RunStage.UNSET,\r\n      tickProgress: 0,\r\n    };\r\n  }\r\n\r\n  componentDidUpdate(_: RunProps, prevState: RunState) {\r\n    if (prevState.runStage !== this.state.runStage) {\r\n      this.stateUpdate();\r\n    }\r\n  }\r\n\r\n  onTickUpdate = (tick: number) => {\r\n    const { options } = this.props;\r\n    if (!options) {\r\n      return;\r\n    }\r\n    const tickProgress = Math.round((tick / options.maxTicks) * 100);\r\n    this.setState({ tickProgress });\r\n  };\r\n\r\n  componentDidMount() {\r\n    const { controllers, options } = this.props;\r\n\r\n    if (!controllers || !controllers.length || !options) {\r\n      this.setState({\r\n        runStage: RunStage.ERROR_STATE,\r\n        errorTitle: \"Missing controllers or options?\",\r\n        errorDesc:\r\n          JSON.stringify(controllers, null, 2) +\r\n          \"\\n\" +\r\n          JSON.stringify(options, null, 2),\r\n      });\r\n      return;\r\n    }\r\n\r\n    const game = new Game(controllers, options, this.onTickUpdate);\r\n    this.setState({ game, runStage: RunStage.CONTROLLER_INIT });\r\n  }\r\n\r\n  onCancel = () => {\r\n    this.props.onPrev();\r\n  };\r\n\r\n  stateUpdate = (g?: Game) => {\r\n    const { runStage, game } = this.state;\r\n    if (!game) {\r\n      this.setState({\r\n        runStage: RunStage.ERROR_STATE,\r\n        errorTitle: \"No game object available\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    switch (runStage) {\r\n      case RunStage.CONTROLLER_INIT:\r\n        game\r\n          .initControllers()\r\n          .then(() => {\r\n            this.setState({ runStage: RunStage.GAME_RUN });\r\n          })\r\n          .catch((err) => {\r\n            this.setState({\r\n              runStage: RunStage.ERROR_STATE,\r\n              errorTitle: \"Error initialising controllers\",\r\n              errorDesc: err.message,\r\n            });\r\n          });\r\n        break;\r\n      case RunStage.GAME_RUN:\r\n        game\r\n          .run()\r\n          .then((history) => {\r\n            this.props.gameComplete(history);\r\n            this.setState({\r\n              runStage: RunStage.GAME_OVER,\r\n              history,\r\n            });\r\n            this.props.onNext();\r\n          })\r\n          .catch((err) => {\r\n            this.setState({\r\n              runStage: RunStage.ERROR_STATE,\r\n              errorTitle: \"Error running game\",\r\n              errorDesc: err.message,\r\n            });\r\n          });\r\n        break;\r\n    }\r\n  };\r\n\r\n  statusMessage = () => {\r\n    const { runStage, errorDesc, errorTitle } = this.state;\r\n    switch (runStage) {\r\n      case RunStage.CONTROLLER_INIT:\r\n        return <Title level={3}>Initialising controllers...</Title>;\r\n      case RunStage.ERROR_STATE:\r\n        return (\r\n          <Alert\r\n            message={errorTitle}\r\n            description={<pre>{errorDesc}</pre>}\r\n            type=\"error\"\r\n            showIcon\r\n          />\r\n        );\r\n      case RunStage.GAME_RUN:\r\n        return <Title level={3}>Running...</Title>;\r\n      case RunStage.GAME_OVER:\r\n        return <Title level={3}>Game complete!</Title>;\r\n      default:\r\n        return (\r\n          <Alert message=\"Game unset!? Contact dev\" type=\"warning\" showIcon />\r\n        );\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const body = this.statusMessage();\r\n\r\n    const { tickProgress, runStage } = this.state;\r\n    let progressStatus: ProgressProps[\"status\"] = \"normal\";\r\n    if (runStage === RunStage.GAME_RUN) {\r\n      progressStatus = \"active\";\r\n    } else if (runStage === RunStage.GAME_OVER) {\r\n      progressStatus = \"success\";\r\n    } else if (runStage === RunStage.ERROR_STATE) {\r\n      progressStatus = \"exception\";\r\n    }\r\n\r\n    return (\r\n      <>\r\n        <Space\r\n          direction=\"vertical\"\r\n          style={{\r\n            width: \"100%\",\r\n            justifyContent: \"center\",\r\n            alignItems: \"center\",\r\n          }}\r\n        >\r\n          {body}\r\n          <Progress\r\n            type=\"circle\"\r\n            percent={tickProgress}\r\n            status={progressStatus}\r\n          />\r\n          <br />\r\n          <Button size=\"large\" onClick={this.onCancel} danger>\r\n            Cancel\r\n          </Button>\r\n        </Space>\r\n      </>\r\n    );\r\n  }\r\n}\r\n","import { cloneDeep } from \"lodash\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport { Controller } from \"../controller/types\";\r\nimport { GameOptions, GameState, Move, Pos } from \"./types\";\r\nimport { gameHistorySummarise, moveToVector2d, randomPos, withinBounds } from \"./utils\";\r\n\r\nconst defaultOptions: GameOptions = {\r\n  gridSize: 50,\r\n  maxTicks: 1000,\r\n};\r\n\r\nexport class Game {\r\n  controllers: Controller[];\r\n  options: GameOptions;\r\n  gameState: GameState;\r\n  controllersReady: boolean[];\r\n  onGameTick: (tick: number) => void;\r\n\r\n  constructor(\r\n    controllers: Controller[],\r\n    options?: GameOptions,\r\n    onGameTick?: (tick: number) => void\r\n  ) {\r\n    this.controllers = controllers;\r\n    this.options = { ...defaultOptions, ...options };\r\n    console.log(options);\r\n    this.gameState = this.initState(controllers, this.options);\r\n    this.controllersReady = new Array(controllers.length).fill(false);\r\n    this.onGameTick = onGameTick ?? (() => {});\r\n  }\r\n\r\n  public async initControllers() {\r\n    await Promise.all(\r\n      this.controllers.map(async (c, i) => {\r\n        await c.init({\r\n          playerNumber: i,\r\n          gameId: this.gameState.meta.gameId,\r\n          gridSize: this.gameState.meta.gridSize,\r\n          playerCount: this.gameState.meta.playerCount,\r\n        });\r\n        this.controllersReady[i] = true;\r\n      })\r\n    );\r\n  }\r\n\r\n  public async run() {\r\n    if (!this.controllersReady.every((r) => r)) {\r\n      throw new Error(\r\n        \"Controllers are not ready. \" + JSON.stringify(this.controllersReady)\r\n      );\r\n    }\r\n\r\n    const allStates: GameState[] = [];\r\n    while (\r\n      this.gameState.playerAlive.filter((p) => p).length > 1 &&\r\n      this.gameState.tick < this.options.maxTicks\r\n    ) {\r\n      const copy = cloneDeep(this.gameState);\r\n      allStates.push(copy);\r\n      await this.update();\r\n      this.onGameTick(this.gameState.tick);\r\n    }\r\n    const copy = cloneDeep(this.gameState);\r\n    allStates.push(copy);\r\n    this.onGameTick(this.gameState.tick);\r\n    return gameHistorySummarise(allStates);\r\n  }\r\n\r\n  private initState(\r\n    controllers: Controller[],\r\n    options: GameOptions\r\n  ): GameState {\r\n    const playerCount = controllers.length;\r\n    const newState: GameState = {\r\n      tick: 0,\r\n      positions: [],\r\n      lastMoves: [],\r\n      food: [],\r\n      playerAlive: new Array(playerCount).fill(true),\r\n      meta: {\r\n        playerCount,\r\n        gameId: uuidv4(),\r\n        gridSize: options.gridSize,\r\n      },\r\n    };\r\n\r\n    newState.positions = this.uniquePos(newState, playerCount).map((p) => [p]);\r\n    newState.food = this.uniquePos(newState, playerCount);\r\n    return newState;\r\n  }\r\n\r\n  private uniquePos(gameState: GameState, positions: number = 1): Pos[] {\r\n    const poss: Pos[] = [];\r\n\r\n    // TODO: actually ensure unique positions\r\n    for (let i = 0; i < positions; i++) {\r\n      const p = randomPos(gameState.meta.gridSize);\r\n      poss.push(p);\r\n    }\r\n\r\n    return poss;\r\n  }\r\n\r\n  public async update() {\r\n    const controllerMoves = await Promise.all(\r\n      this.controllers.map(async (c, i) => await c.update(this.gameState, i))\r\n    );\r\n\r\n    const newState = this.apply(this.gameState, controllerMoves);\r\n    this.gameState = newState;\r\n    return this.gameState;\r\n  }\r\n\r\n  private apply(oldState: GameState, controllerMoves: Move[]): GameState {\r\n    const newState = { ...oldState };\r\n\r\n    newState.tick = oldState.tick + 1;\r\n\r\n    controllerMoves.forEach((move, player) => {\r\n      if (!oldState.playerAlive[player]) {\r\n        return;\r\n      }\r\n\r\n      const currentHead = oldState.positions[player][0];\r\n      const moveVec = moveToVector2d(move);\r\n      const newHead = [\r\n        currentHead[0] + moveVec[0],\r\n        currentHead[1] + moveVec[1],\r\n      ] as Pos;\r\n\r\n      newState.lastMoves[player] = move;\r\n\r\n      // Check bounds collision\r\n      if (!withinBounds(newHead, newState.meta.gridSize)) {\r\n        newState.playerAlive[player] = false;\r\n        return;\r\n      }\r\n\r\n      // Check part collision\r\n      const collided = oldState.positions.some((pos) => {\r\n        return pos.some(([x, y]) => x === newHead[0] && y === newHead[1]);\r\n      });\r\n\r\n      if (collided) {\r\n        newState.playerAlive[player] = false;\r\n        return;\r\n      }\r\n\r\n      // Check food collision\r\n      const ateFood = oldState.food.some((pos) => {\r\n        if (pos[0] === newHead[0] && pos[1] === newHead[1]) {\r\n          newState.food = newState.food.filter((p) => p !== pos);\r\n          return true;\r\n        }\r\n        return false;\r\n      });\r\n\r\n      if (!ateFood) {\r\n        newState.positions[player].pop();\r\n      }\r\n      newState.positions[player].unshift(newHead);\r\n    });\r\n\r\n    // Repopulate food\r\n    newState.food.push(\r\n      ...this.uniquePos(\r\n        newState,\r\n        newState.meta.playerCount - newState.food.length\r\n      )\r\n    );\r\n\r\n    return newState;\r\n  }\r\n}\r\n","import store from \"store\";\r\nimport { GameHistory } from \"../engine/types\";\r\n\r\nexport const enum StoreKeys {\r\n  HISTORIES = \"histories\",\r\n}\r\n\r\nexport const getHistories = (): GameHistory[] => {\r\n  const histories = store.get(StoreKeys.HISTORIES) || {};\r\n  return Object.values(histories as GameHistory[]).sort(\r\n    (a, b) => new Date(a.timeStamp).valueOf() - new Date(b.timeStamp).valueOf()\r\n  );\r\n};\r\n\r\nexport const addHistory = (history: GameHistory): void => {\r\n  const histories = store.get(StoreKeys.HISTORIES) || {};\r\n  store.set(StoreKeys.HISTORIES, { ...histories, [history.gameId]: history });\r\n};\r\n\r\nexport const removeHistory = (id: string): GameHistory[] => {\r\n  const histories = store.get(StoreKeys.HISTORIES) || {};\r\n  histories[id] = undefined;\r\n  store.set(StoreKeys.HISTORIES, histories);\r\n  return getHistories();\r\n};\r\n","import { Button, Form, InputNumber, Space } from \"antd\";\r\nimport React, { useCallback, useEffect } from \"react\";\r\nimport { GameOptions } from \"../../engine/types\";\r\n\r\nexport type GameSetupProps = {\r\n  onConfigChange: (options: GameOptions) => void;\r\n  onNext: () => void;\r\n  onPrev: () => void;\r\n};\r\n\r\nexport const GameSetup: React.FunctionComponent<GameSetupProps> = ({\r\n  onConfigChange,\r\n  onNext,\r\n  onPrev,\r\n}) => {\r\n  const [gridSize, setGridSize] = React.useState(50);\r\n  const [maxTicks, setMaxTicks] = React.useState(1000);\r\n\r\n  const changeCallback = useCallback(() => {\r\n    onConfigChange({\r\n      gridSize,\r\n      maxTicks,\r\n    });\r\n  }, [onConfigChange, gridSize, maxTicks]);\r\n\r\n  const onMaxTicksChange = useCallback(\r\n    (value: number) => {\r\n      setMaxTicks(value);\r\n      changeCallback();\r\n    },\r\n    [changeCallback, setMaxTicks]\r\n  );\r\n\r\n  const onGridSizeChange = useCallback(\r\n    (value: number) => {\r\n      setGridSize(value);\r\n      changeCallback();\r\n    },\r\n    [changeCallback, setGridSize]\r\n  );\r\n\r\n  useEffect(() => {\r\n    onConfigChange({\r\n      gridSize,\r\n      maxTicks,\r\n    });\r\n  }, [onConfigChange, gridSize, maxTicks]);\r\n\r\n  return (\r\n    <>\r\n      <Form>\r\n        <Form.Item label=\"Max ticks\">\r\n          <InputNumber\r\n            min={1}\r\n            max={10000}\r\n            defaultValue={1000}\r\n            value={maxTicks}\r\n            onChange={onMaxTicksChange}\r\n          />\r\n        </Form.Item>\r\n\r\n        <Form.Item label=\"Grid size\">\r\n          <InputNumber\r\n            min={10}\r\n            max={1000}\r\n            defaultValue={50}\r\n            value={gridSize}\r\n            onChange={onGridSizeChange}\r\n          />\r\n        </Form.Item>\r\n      </Form>\r\n\r\n      <Space>\r\n        <Button onClick={onPrev}>Previous</Button>\r\n        <Button type=\"primary\" onClick={onNext}>\r\n          Start\r\n        </Button>\r\n      </Space>\r\n    </>\r\n  );\r\n};\r\n","import { Steps, Typography } from \"antd\";\r\nimport React, { useCallback, useState } from \"react\";\r\nimport { Controller } from \"../../controller/types\";\r\nimport { GameHistory, GameOptions } from \"../../engine/types\";\r\nimport { ControllerCreator } from \"./ControllerCreator\";\r\nimport { Run } from \"./Run\";\r\nimport { GameSetup } from \"./Setup\";\r\nimport { Summary } from \"./Summary\";\r\n\r\nconst { Step } = Steps;\r\nconst { Title } = Typography;\r\n\r\nexport type GamePageProps = {};\r\n\r\nenum SetupStage {\r\n  CONTROLLER_CREATOR,\r\n  GAME_SETUP,\r\n  PLAYING,\r\n  SUMMARY,\r\n}\r\n\r\nexport const GameRunner: React.FunctionComponent<GamePageProps> = () => {\r\n  const [currentStage, setCurrentStage] = useState(\r\n    SetupStage.CONTROLLER_CREATOR\r\n  );\r\n\r\n  const [controllers, setControllers] = useState<Controller[]>([]);\r\n  const [options, setOptions] = useState<GameOptions | undefined>();\r\n  const [gameHistory, setGameHistory] = useState<GameHistory | undefined>();\r\n\r\n  const creatorCallback = useCallback(\r\n    (controllers) => {\r\n      setControllers(controllers);\r\n    },\r\n    [setControllers]\r\n  );\r\n\r\n  const onConfigChange = useCallback(\r\n    (options) => {\r\n      setOptions(options);\r\n    },\r\n    [setOptions]\r\n  );\r\n\r\n  const completeCallback = useCallback(\r\n    (history) => {\r\n      setGameHistory(history);\r\n    },\r\n    [setGameHistory]\r\n  );\r\n\r\n  const nextCallback = useCallback(() => {\r\n    setCurrentStage((currentStage + 1) % (SetupStage.SUMMARY + 1));\r\n  }, [currentStage, setCurrentStage]);\r\n  const prevCallback = useCallback(() => {\r\n    setCurrentStage((currentStage - 1) % (SetupStage.SUMMARY + 1));\r\n  }, [currentStage, setCurrentStage]);\r\n\r\n  return (\r\n    <>\r\n      <Title>Play a Game</Title>\r\n      <Steps current={currentStage}>\r\n        <Step title=\"Controller Creator\" />\r\n        <Step title=\"Game Setup\" />\r\n        <Step title=\"Running\" />\r\n        <Step title=\"Summary\" />\r\n      </Steps>\r\n\r\n      <br />\r\n      {currentStage === SetupStage.CONTROLLER_CREATOR && (\r\n        <ControllerCreator\r\n          onControllerChange={creatorCallback}\r\n          onNext={nextCallback}\r\n        />\r\n      )}\r\n      {currentStage === SetupStage.GAME_SETUP && (\r\n        <GameSetup\r\n          onConfigChange={onConfigChange}\r\n          onNext={nextCallback}\r\n          onPrev={prevCallback}\r\n        />\r\n      )}\r\n      {currentStage === SetupStage.PLAYING && (\r\n        <Run\r\n          controllers={controllers}\r\n          options={options}\r\n          onPrev={prevCallback}\r\n          onNext={nextCallback}\r\n          gameComplete={completeCallback}\r\n        />\r\n      )}\r\n      {currentStage === SetupStage.SUMMARY && (\r\n        <Summary gameHistory={gameHistory} onNext={nextCallback} />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n","import { GameHistory } from \"../engine/types\";\r\n\r\nexport const createDownloadHref = (gameHistory: GameHistory) => {\r\n  const jsonBlob = new Blob([JSON.stringify(gameHistory, null, 2)], {\r\n    type: \"text/json\",\r\n  });\r\n  const href = URL.createObjectURL(jsonBlob);\r\n  const download = `${gameHistory.timeStamp}.json`;\r\n\r\n  return {\r\n    href,\r\n    download,\r\n  };\r\n};\r\n","import { Button, Collapse, Divider, Result, Space, Typography } from \"antd\";\r\nimport React, { useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport {\r\n    DownloadOutlined, EyeOutlined, HourglassOutlined, MehOutlined, TrophyOutlined\r\n} from \"@ant-design/icons\";\r\nimport { GameHistory, GameResult } from \"../../engine/types\";\r\nimport { addHistory } from \"../../store\";\r\nimport { createDownloadHref } from \"../../store/download\";\r\n\r\nconst { Panel } = Collapse;\r\nconst { Paragraph } = Typography;\r\n\r\nexport type SummaryProps = {\r\n  gameHistory?: GameHistory;\r\n  onNext: () => void;\r\n};\r\n\r\nexport const Summary: React.FunctionComponent<SummaryProps> = (props) => {\r\n  const { gameHistory, onNext } = props;\r\n  useEffect(() => {\r\n    if (gameHistory) {\r\n      addHistory(gameHistory);\r\n    }\r\n  });\r\n  if (!gameHistory) {\r\n    return <div>Error: No game history specified</div>;\r\n  }\r\n\r\n  const downloadProps = createDownloadHref(gameHistory);\r\n\r\n  let result = (\r\n    <Result\r\n      icon={<TrophyOutlined />}\r\n      status=\"success\"\r\n      title={\"Player \" + gameHistory.winner + \" wins!\"}\r\n    />\r\n  );\r\n\r\n  if (gameHistory.result === GameResult.DRAW) {\r\n    result = <Result icon={<MehOutlined />} status=\"warning\" title={\"Draw!\"} />;\r\n  } else if (gameHistory.result === GameResult.TIMEOUT) {\r\n    result = (\r\n      <Result icon={<HourglassOutlined />} status=\"warning\" title={\"Timeout\"} />\r\n    );\r\n  }\r\n  return (\r\n    <>\r\n      {result}\r\n      <Space>\r\n        <Button onClick={onNext} type=\"primary\">\r\n          New Game\r\n        </Button>\r\n        <Link to={`/viewer?gameId=${gameHistory?.gameId}`}>\r\n          <Button icon={<EyeOutlined />}>Show in viewer</Button>\r\n        </Link>\r\n        <Button icon={<DownloadOutlined />} {...downloadProps}>\r\n          Download Replay\r\n        </Button>\r\n      </Space>\r\n\r\n      <Divider />\r\n\r\n      <Collapse>\r\n        <Panel header=\"Full Game History\" key=\"1\">\r\n          <Paragraph>\r\n            <pre>{JSON.stringify(gameHistory, null, 2)}</pre>\r\n          </Paragraph>\r\n        </Panel>\r\n      </Collapse>\r\n    </>\r\n  );\r\n};\r\n","import { Typography } from \"antd\";\r\nimport React from \"react\";\r\n\r\nconst { Title, Paragraph } = Typography;\r\n\r\nexport type HomePageProps = {};\r\n\r\nexport const HomePage: React.FunctionComponent<HomePageProps> = (props) => {\r\n  return (\r\n    <>\r\n      <Title>Snake Tron - Code Fights!</Title>\r\n\r\n      <Paragraph>What, you thought there would be content?</Paragraph>\r\n    </>\r\n  );\r\n};\r\n","import { Layout } from \"antd\";\r\nimport React from \"react\";\r\n\r\nconst { Content } = Layout;\r\n\r\nexport type ContentPartProps = {};\r\n\r\nexport const ContentPart: React.FunctionComponent<ContentPartProps> = (\r\n  props\r\n) => {\r\n  return <Content className=\"content\">{props.children}</Content>;\r\n};\r\n","import React from \"react\";\r\nimport { Layout } from \"antd\";\r\n\r\nconst { Footer } = Layout;\r\n\r\nexport const FooterPart: React.FunctionComponent = () => {\r\n  return (\r\n    <Footer className=\"footer\">\r\n      Created by <a href=\"http://samuel-lewis.com/\">Samuel Lewis</a>\r\n    </Footer>\r\n  );\r\n};\r\n","import { Layout, Menu } from \"antd\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst { Header } = Layout;\r\n\r\nexport const HeaderPart: React.FunctionComponent = () => {\r\n  return (\r\n    <Header className=\"header\">\r\n      <div className=\"logo\"></div>\r\n      <Menu theme=\"dark\" mode=\"horizontal\">\r\n        <Menu.Item key=\"home\">\r\n          <Link to=\"/\">Home</Link>\r\n        </Menu.Item>\r\n        <Menu.Item key=\"game\">\r\n          <Link to=\"/game\">Game</Link>\r\n        </Menu.Item>\r\n        <Menu.Item key=\"viewer\">\r\n          <Link to=\"/viewer\">Viewer</Link>\r\n        </Menu.Item>\r\n        <Menu.Item key=\"tester\">\r\n          <Link to=\"/tester\">Controller Tester</Link>\r\n        </Menu.Item>\r\n      </Menu>\r\n    </Header>\r\n  );\r\n};\r\n","import { Button, Col, Divider, Row, Tabs, Typography } from \"antd\";\r\nimport React, { useCallback, useState } from \"react\";\r\nimport { RestControllerFactory } from \"../controller/adapters/rest\";\r\nimport { Controller, InitPayload } from \"../controller/types\";\r\nimport { GameState, Move } from \"../engine/types\";\r\n\r\nconst { TabPane } = Tabs;\r\nconst { Title, Paragraph } = Typography;\r\n\r\nconst dummyId = \"48e2ee9e-171e-45bd-8904-a762d8e2b782\";\r\n\r\nconst sampleIniData: InitPayload = {\r\n  playerNumber: 2,\r\n  playerCount: 4,\r\n  gameId: dummyId,\r\n  gridSize: 50,\r\n};\r\n\r\nconst sampleStateData: GameState = {\r\n  tick: 2,\r\n  positions: [\r\n    [\r\n      [42, 31],\r\n      [41, 31],\r\n      [40, 31],\r\n    ],\r\n    [\r\n      [47, 27],\r\n      [47, 28],\r\n    ],\r\n  ],\r\n  lastMoves: [Move.NORTH, Move.SOUTH],\r\n  food: [\r\n    [35, 16],\r\n    [17, 6],\r\n  ],\r\n  playerAlive: [true, true],\r\n  meta: {\r\n    playerCount: 2,\r\n    gameId: dummyId,\r\n    gridSize: 50,\r\n  },\r\n};\r\n\r\nexport type ControllerTesterPageProps = {};\r\n\r\nexport const ControllerTesterPage: React.FunctionComponent<ControllerTesterPageProps> =\r\n  () => {\r\n    const [controller, setController] = useState<Controller | null>(null);\r\n    const [response, setResponse] = useState<string>(\"\");\r\n    const [sendData, setSendData] = useState<string>(\"\");\r\n\r\n    const loaderCallback = useCallback(\r\n      (value) => {\r\n        console.log(value);\r\n        setController(RestControllerFactory.create(value));\r\n      },\r\n      [setController]\r\n    );\r\n\r\n    const gameIniButton = useCallback(() => {\r\n      setSendData(JSON.stringify(sampleIniData, null, 2));\r\n      controller\r\n        ?.init(sampleIniData)\r\n        .then((r) => setResponse(JSON.stringify(r, null, 2)))\r\n        .catch((e) => setResponse(e.message));\r\n    }, [controller, setResponse]);\r\n\r\n    const stateSendButton = useCallback(() => {\r\n      setSendData(JSON.stringify(sampleStateData, null, 2));\r\n      controller\r\n        ?.update(sampleStateData, 1)\r\n        .then((r) => setResponse(JSON.stringify(r, null, 2)))\r\n        .catch((e) => setResponse(e.message));\r\n    }, [controller, setResponse]);\r\n\r\n    return (\r\n      <>\r\n        <Title>Controller Tester</Title>\r\n\r\n        <Tabs defaultActiveKey=\"1\">\r\n          <TabPane tab={RestControllerFactory.label} key=\"1\">\r\n            <RestControllerFactory.Selector onChange={loaderCallback} />\r\n          </TabPane>\r\n        </Tabs>\r\n\r\n        <Button onClick={gameIniButton}>Test game initialise</Button>\r\n        <Button onClick={stateSendButton}>Test game update</Button>\r\n\r\n        <Row gutter={16}>\r\n          <Col span={12}>\r\n            <Divider>Sent</Divider>\r\n            <Paragraph>{sendData && <pre>{sendData}</pre>}</Paragraph>\r\n          </Col>\r\n          <Col span={12}>\r\n            <Divider>Response</Divider>\r\n            <Paragraph>{response && <pre>{response}</pre>}</Paragraph>\r\n          </Col>\r\n        </Row>\r\n      </>\r\n    );\r\n  };\r\n","import React, { useLayoutEffect, useRef } from \"react\";\r\nimport { MetalessGameState, Pos } from \"../engine/types\";\r\n\r\nconst CANVAS_SIZE = 400;\r\n\r\nexport type CanvasProps = {\r\n  state: MetalessGameState;\r\n  gridSize: number;\r\n};\r\n\r\nconst clearCanvas = (ctx: CanvasRenderingContext2D) => {\r\n  ctx.clearRect(0, 0, CANVAS_SIZE, CANVAS_SIZE);\r\n  ctx.strokeRect(0, 0, CANVAS_SIZE, CANVAS_SIZE);\r\n};\r\n\r\nfunction drawPart(\r\n  ctx: CanvasRenderingContext2D,\r\n  partSize: number,\r\n  [x, y]: Pos,\r\n  colour: string\r\n) {\r\n  ctx.fillStyle = colour;\r\n  ctx.fillRect(x * partSize, y * partSize, partSize, partSize);\r\n}\r\n\r\nfunction drawSnake(\r\n  ctx: CanvasRenderingContext2D,\r\n  partSize: number,\r\n  snake: Pos[],\r\n  player: number\r\n) {\r\n  const colour = \"red\";\r\n  snake.forEach((pos) => drawPart(ctx, partSize, pos, colour));\r\n}\r\n\r\nexport const Canvas: React.FunctionComponent<CanvasProps> = (props) => {\r\n  const canvasRef = useRef<HTMLCanvasElement>(null);\r\n  const { state, gridSize } = props;\r\n\r\n  useLayoutEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    if (!canvas) {\r\n      return;\r\n    }\r\n\r\n    const ctx = canvas.getContext(\"2d\");\r\n    if (!ctx) {\r\n      return;\r\n    }\r\n\r\n    const partSize = CANVAS_SIZE / gridSize;\r\n\r\n    clearCanvas(ctx);\r\n\r\n    state.positions.forEach((player, i) => {\r\n      drawSnake(ctx, partSize, player, i);\r\n    });\r\n    state.food.forEach((pos) => drawPart(ctx, partSize, pos, \"green\"));\r\n  }, [canvasRef, state, gridSize]);\r\n\r\n  return <canvas width={CANVAS_SIZE} height={CANVAS_SIZE} ref={canvasRef} />;\r\n};\r\n","import { Table, Typography } from \"antd\";\r\nimport React from \"react\";\r\nimport { CheckCircleOutlined, CloseCircleOutlined } from \"@ant-design/icons\";\r\nimport { MetalessGameState } from \"../engine/types\";\r\n\r\nconst { Paragraph } = Typography;\r\n\r\nexport type StateSnapshotProps = {\r\n  frame: MetalessGameState;\r\n  viewedPlayer?: (player: number) => void;\r\n};\r\n\r\nexport const StateSnapshot: React.FunctionComponent<StateSnapshotProps> = ({\r\n  frame,\r\n}) => {\r\n  if (!frame) {\r\n    return null;\r\n  }\r\n  const playerData = new Array(frame.playerAlive.length)\r\n    .fill(null)\r\n    .map((_, i) => {\r\n      return {\r\n        key: `Player ${i}`,\r\n        name: `Player ${i}`,\r\n        alive: frame.playerAlive[i],\r\n        lastMove: frame.lastMoves[i],\r\n        position: frame.positions[i],\r\n      };\r\n    });\r\n\r\n  const columns = [\r\n    {\r\n      title: \"Name\",\r\n      dataIndex: \"name\",\r\n      key: \"name\",\r\n    },\r\n    {\r\n      title: \"Alive\",\r\n      dataIndex: \"alive\",\r\n      key: \"alive\",\r\n      render: (alive: boolean) =>\r\n        alive ? <CheckCircleOutlined /> : <CloseCircleOutlined />,\r\n    },\r\n    {\r\n      title: \"Last Move\",\r\n      dataIndex: \"lastMove\",\r\n      key: \"lastMove\",\r\n    },\r\n    {\r\n      title: \"Positions\",\r\n      dataIndex: \"position\",\r\n      key: \"position\",\r\n      render: (position: number) => JSON.stringify(position),\r\n      ellipsis: true,\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <>\r\n      <Paragraph>Tick: {frame.tick}</Paragraph>\r\n      <Paragraph>Food: {JSON.stringify(frame.food)}</Paragraph>\r\n      <Table\r\n        size=\"small\"\r\n        dataSource={playerData}\r\n        columns={columns}\r\n        pagination={false}\r\n        expandable={{\r\n          expandedRowRender: (record) => (\r\n            <p style={{ margin: 0 }}>{JSON.stringify(record.position)}</p>\r\n          ),\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n};\r\n","import { Col, Row, Slider } from \"antd\";\r\nimport React, { useCallback, useState } from \"react\";\r\nimport { GameHistory } from \"../engine/types\";\r\nimport { Canvas } from \"./Canvas\";\r\nimport { StateSnapshot } from \"./Snapshot\";\r\n\r\nexport type ViewerProps = {\r\n  history?: GameHistory;\r\n};\r\n\r\nexport const Viewer: React.FunctionComponent<ViewerProps> = (props) => {\r\n  const { history } = props;\r\n  const [tick, setTick] = useState(0);\r\n  const sliderChange = useCallback((value) => setTick(value), [setTick]);\r\n\r\n  if (!history) {\r\n    return <div>Error: No history loaded?!</div>;\r\n  }\r\n\r\n  return (\r\n    <Row justify=\"center\">\r\n      <Col span={12}>\r\n        <Canvas state={history.ticks[tick]} gridSize={history.gridSize} />\r\n        <Slider\r\n          style={{ width: \"400px\", marginLeft: 0, marginRight: 0 }}\r\n          value={tick}\r\n          min={0}\r\n          max={history.tickCount - 1}\r\n          onChange={sliderChange}\r\n        />\r\n      </Col>\r\n      <Col span={12}>\r\n        <StateSnapshot frame={history.ticks[tick]} />\r\n      </Col>\r\n    </Row>\r\n  );\r\n};\r\n","import { Button, Divider, message, Table, TableProps, Tag, Tooltip, Typography } from \"antd\";\r\nimport React, { useEffect, useMemo, useState } from \"react\";\r\nimport { Link, useLocation } from \"react-router-dom\";\r\nimport { DeleteOutlined, DownloadOutlined, EyeOutlined } from \"@ant-design/icons\";\r\nimport { GameHistory, GameResult } from \"../engine/types\";\r\nimport { getHistories, removeHistory } from \"../store\";\r\nimport { createDownloadHref } from \"../store/download\";\r\nimport { Viewer } from \"../viewer/Viewer\";\r\n\r\nconst { Title } = Typography;\r\n\r\nconst useQuery = () => {\r\n  return new URLSearchParams(useLocation().search);\r\n};\r\n\r\nexport type ViewerPageProps = {};\r\n\r\nexport const ViewerPage: React.FunctionComponent<ViewerPageProps> = () => {\r\n  const [savedGames, setSavedGames] = useState<GameHistory[]>(\r\n    getHistories().reverse()\r\n  );\r\n  const [loadedHistory, setLoadedHistory] = useState<GameHistory | undefined>();\r\n  const query = useQuery();\r\n\r\n  useEffect(() => {\r\n    const id = query.get(\"gameId\");\r\n    if (!id) {\r\n      return;\r\n    }\r\n\r\n    if (id === \"latest\") {\r\n      setLoadedHistory(savedGames[0]);\r\n      return;\r\n    }\r\n\r\n    const selected = savedGames.find((h) => h.gameId === id);\r\n    if (selected) {\r\n      setLoadedHistory(selected);\r\n      return;\r\n    }\r\n\r\n    message.error(`Could not find game ${id}`);\r\n  }, [savedGames, setLoadedHistory, query]);\r\n\r\n  const dataSource = useMemo(() => {\r\n    return savedGames.map((game) => {\r\n      return {\r\n        ...game,\r\n        key: game.gameId,\r\n      };\r\n    });\r\n  }, [savedGames]);\r\n\r\n  const columns: TableProps<GameHistory>[\"columns\"] = [\r\n    {\r\n      title: \"Timestamp\",\r\n      dataIndex: \"timeStamp\",\r\n      key: \"timeStamp\",\r\n      ellipsis: true,\r\n      sorter: {\r\n        compare: (a, b: GameHistory) =>\r\n          new Date(a.timeStamp).valueOf() - new Date(b.timeStamp).valueOf(),\r\n        multiple: 1,\r\n      },\r\n      render: (timeStamp: string) => {\r\n        return <span>{new Date(timeStamp).toString()}</span>;\r\n      },\r\n    },\r\n    {\r\n      title: \"Result\",\r\n      dataIndex: \"result\",\r\n      key: \"result\",\r\n      sorter: {\r\n        compare: (a: GameHistory, b: GameHistory) =>\r\n          a.result.localeCompare(b.result),\r\n        multiple: 2,\r\n      },\r\n      render(value: GameResult) {\r\n        const colour =\r\n          value === GameResult.WINNER\r\n            ? \"green\"\r\n            : value === GameResult.DRAW\r\n            ? \"blue\"\r\n            : \"red\";\r\n        return <Tag color={colour}>{value}</Tag>;\r\n      },\r\n    },\r\n    {\r\n      title: \"Winner\",\r\n      dataIndex: \"winner\",\r\n      key: \"winner\",\r\n      sorter: {\r\n        compare: (a: GameHistory, b: GameHistory) => a.winner - b.winner,\r\n        multiple: 3,\r\n      },\r\n    },\r\n    {\r\n      title: \"Player Count\",\r\n      dataIndex: \"playerCount\",\r\n      key: \"playerCount\",\r\n      sorter: {\r\n        compare: (a: GameHistory, b: GameHistory) =>\r\n          a.playerCount - b.playerCount,\r\n        multiple: 4,\r\n      },\r\n    },\r\n    {\r\n      title: \"Tick Count\",\r\n      dataIndex: \"tickCount\",\r\n      key: \"tickCount\",\r\n      sorter: {\r\n        compare: (a: GameHistory, b: GameHistory) => a.tickCount - b.tickCount,\r\n        multiple: 5,\r\n      },\r\n    },\r\n    {\r\n      title: \"Grid Size\",\r\n      dataIndex: \"gridSize\",\r\n      key: \"gridSize\",\r\n      sorter: {\r\n        compare: (a: GameHistory, b: GameHistory) => a.gridSize - b.gridSize,\r\n        multiple: 6,\r\n      },\r\n    },\r\n    {\r\n      title: \"ID\",\r\n      dataIndex: \"gameId\",\r\n      key: \"gameId\",\r\n      ellipsis: true,\r\n      sorter: {\r\n        compare: (a: GameHistory, b: GameHistory) =>\r\n          a.gameId.localeCompare(b.gameId),\r\n        multiple: 7,\r\n      },\r\n    },\r\n    {\r\n      title: \"Actions\",\r\n      key: \"actions\",\r\n      render: (_, record: any) => {\r\n        const { key, humanDate, ...rest } = record;\r\n        const downloadProps = createDownloadHref(rest);\r\n        return (\r\n          <>\r\n            <Tooltip title=\"View\">\r\n              <Link to={`/viewer?gameId=${rest.gameId}`}>\r\n                <Button icon={<EyeOutlined />} />\r\n              </Link>\r\n            </Tooltip>\r\n\r\n            <Tooltip title=\"Download\">\r\n              <Button icon={<DownloadOutlined />} {...downloadProps} />\r\n            </Tooltip>\r\n            <Tooltip title=\"Delete\">\r\n              <Button\r\n                onClick={() => {\r\n                  removeHistory(record.gameId);\r\n                  setSavedGames(getHistories());\r\n                }}\r\n                icon={<DeleteOutlined />}\r\n              />\r\n            </Tooltip>\r\n          </>\r\n        );\r\n      },\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <>\r\n      <Title>Game Viewer</Title>\r\n\r\n      {loadedHistory && <Viewer history={loadedHistory} />}\r\n\r\n      <Divider>Saved Rounds</Divider>\r\n      <Table\r\n        dataSource={dataSource}\r\n        columns={columns}\r\n        pagination={{\r\n          pageSize: 10,\r\n          position: [\"topRight\", \"bottomRight\"],\r\n          showTotal: (total) => `${total} games`,\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n};\r\n","import \"antd/dist/antd.css\";\nimport \"./App.less\";\nimport { Layout } from \"antd\";\nimport { Route, Switch } from \"react-router-dom\";\nimport { GameRunner } from \"./pages/game/GameRunner\";\nimport { HomePage } from \"./pages/Home\";\nimport { ContentPart } from \"./pages/parts/Content\";\nimport { FooterPart } from \"./pages/parts/Footer\";\nimport { HeaderPart } from \"./pages/parts/Header\";\nimport { ControllerTesterPage } from \"./pages/Tester\";\nimport { ViewerPage } from \"./pages/Viewer\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Layout className=\"layout\">\n        <HeaderPart />\n        <ContentPart>\n          <Switch>\n            <Route exact path=\"/\">\n              <HomePage />\n            </Route>\n            <Route path=\"/game\">\n              <GameRunner />\n            </Route>\n            <Route path=\"/viewer\">\n              <ViewerPage />\n            </Route>\n            <Route path=\"/tester\">\n              <ControllerTesterPage />\n            </Route>\n          </Switch>\n        </ContentPart>\n        <FooterPart />\n      </Layout>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { HashRouter } from \"react-router-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}