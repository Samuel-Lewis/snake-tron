{"version":3,"sources":["engine/types.ts","controller/adapters/rest.tsx","controller/types.ts","pages/game/ControllerCreator.tsx","pages/game/Run.tsx","engine/positionPool.ts","engine/utils.ts","engine/game.ts","store/index.ts","pages/game/Setup.tsx","pages/game/GameRunner.tsx","store/download.ts","pages/game/Summary.tsx","pages/Home.tsx","pages/parts/Content.tsx","pages/parts/Footer.tsx","pages/parts/Header.tsx","pages/Tester.tsx","theme.ts","viewer/Canvas.tsx","viewer/Snapshot.tsx","viewer/Viewer.tsx","pages/Viewer.tsx","App.tsx","index.tsx"],"names":["GameResult","Move","headers","RestController","url","init","payload","a","axios","post","response","data","update","state","playerNumber","params","end","this","RestControllerFactory","Selector","onChange","onChangeCallback","useCallback","e","target","value","Item","label","prefix","GlobalOutlined","create","isController","controller","availableFactories","ControllerCreator","onControllerChange","onNext","useState","factoriesWithID","setFactoriesWithID","controllers","useMemo","selectorChange","pos","factory","filter","selectorFields","map","key","style","display","align","type","icon","DeleteOutlined","onClick","undefined","selectorCreateButtons","PlusOutlined","uniqueId","title","placement","disabled","length","RunStage","isPos","Array","isArray","PositionPool","gameState","pool","generatePool","positions","meta","food","width","gridSize","taken","flatten","concat","fill","_","i","Math","floor","p","some","t","isEqual","next","random","splice","empty","gameHistorySummarise","history","lastFrame","winnerCount","playerAlive","result","TIMEOUT","WINNER","DRAW","winner","findIndex","ticks","h","omit","timeStamp","Date","toISOString","tickCount","defaultOptions","maxTicks","Game","options","onGameTick","controllersReady","initState","Promise","all","c","gameId","playerCount","every","r","Error","JSON","stringify","allStates","tick","copy","cloneDeep","push","newState","lastMoves","uuidv4","posPool","catch","controllerMoves","apply","oldState","newHeads","move","player","notification","error","message","description","duration","currentHead","moveVec","NORTH","SOUTH","EAST","WEST","moveToVector2d","forEach","head","bounds","eatenFoodIndex","Set","collides","add","pop","allBodies","flat","unshift","positionPool","has","Title","Typography","StoreKeys","Run","props","onTickUpdate","tickProgress","round","setState","onCancel","onPrev","stateUpdate","g","runStage","game","CONTROLLER_INIT","initControllers","then","GAME_RUN","err","ERROR_STATE","errorTitle","errorDesc","run","gameComplete","GAME_OVER","statusMessage","level","showIcon","UNSET","prevState","body","progressStatus","direction","justifyContent","alignItems","percent","status","size","danger","React","Component","GameSetup","onConfigChange","setGridSize","setMaxTicks","changeCallback","onMaxTicksChange","onGridSizeChange","useEffect","min","max","defaultValue","SetupStage","getHistories","histories","store","get","HISTORIES","Object","values","sort","b","valueOf","createDownloadHref","gameHistory","jsonBlob","Blob","href","URL","createObjectURL","download","Panel","Collapse","Paragraph","Summary","set","addHistory","downloadProps","TrophyOutlined","MehOutlined","HourglassOutlined","to","EyeOutlined","DownloadOutlined","header","Step","Steps","GameRunner","CONTROLLER_CREATOR","currentStage","setCurrentStage","setControllers","setOptions","setGameHistory","creatorCallback","completeCallback","nextCallback","SUMMARY","prevCallback","current","GAME_SETUP","PLAYING","HomePage","Content","Layout","ContentPart","className","children","Footer","FooterPart","Header","HeaderPart","theme","mode","TabPane","Tabs","dummyId","sampleIniData","sampleStateData","ControllerTesterPage","setController","setResponse","sendData","setSendData","loaderCallback","console","log","gameIniButton","stateSendButton","defaultActiveKey","tab","gutter","span","contrastColours","getColour","number","CANVAS_SIZE","posToCanvas","partSize","Canvas","canvasRef","useRef","useLayoutEffect","canvas","ctx","getContext","clearRect","lineWidth","strokeRect","clearCanvas","snake","colour","headX","headY","strokeStyle","lineCap","beginPath","moveTo","x","y","lineTo","stroke","drawSnake","fillStyle","arc","PI","drawFood","height","ref","StateSnapshot","frame","playerData","alive","lastMove","position","columns","dataIndex","render","backgroundColor","CheckCircleOutlined","CloseCircleOutlined","ellipsis","dataSource","pagination","expandable","expandedRowRender","record","margin","Viewer","setTick","sliderChange","justify","marginLeft","marginRight","ViewerPage","reverse","savedGames","setSavedGames","loadedHistory","setLoadedHistory","query","URLSearchParams","useLocation","search","id","selected","find","sorter","compare","multiple","toString","localeCompare","color","humanDate","rest","removeHistory","pageSize","showTotal","total","App","exact","path","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.af0178ff.chunk.js","sourcesContent":["export type GameOptions = {\r\n  gridSize: number;\r\n  maxTicks: number;\r\n};\r\n\r\nexport enum GameResult {\r\n  DRAW = \"DRAW\",\r\n  WINNER = \"WINNER\",\r\n  TIMEOUT = \"TIMEOUT\",\r\n}\r\n\r\nexport type MetalessGameState = Omit<GameState, \"meta\">;\r\nexport type GameHistory = {\r\n  tickCount: number;\r\n  ticks: MetalessGameState[];\r\n  winner: number;\r\n  result: GameResult;\r\n  gridSize: number;\r\n  playerCount: number;\r\n  gameId: string;\r\n  timeStamp: string;\r\n};\r\n\r\nexport type GameOptionsOptionals = {};\r\n\r\nexport enum Move {\r\n  NORTH = \"N\",\r\n  SOUTH = \"S\",\r\n  EAST = \"E\",\r\n  WEST = \"W\",\r\n}\r\n\r\nexport type Pos = [number, number];\r\n\r\nexport type GameState = {\r\n  tick: number;\r\n  positions: Array<Pos[]>;\r\n  food: Pos[];\r\n  playerAlive: boolean[];\r\n  lastMoves: Move[];\r\n  meta: {\r\n    gridSize: number;\r\n    playerCount: number;\r\n    gameId: string;\r\n  };\r\n};\r\n\r\nexport const isPos = (pos: any): pos is Pos => {\r\n  return Array.isArray(pos) && pos.length === 2;\r\n};\r\n","import { Form, Input } from \"antd\";\r\nimport axios from \"axios\";\r\nimport React, { useCallback } from \"react\";\r\nimport { GlobalOutlined } from \"@ant-design/icons\";\r\nimport { GameState } from \"../../engine/types\";\r\nimport { Controller, ControllerFactory, ControllerSelector, InitPayload } from \"../types\";\r\n\r\nconst headers = { \"Access-Control-Allow-Origin\": \"*\" };\r\n\r\nexport class RestController implements Controller {\r\n  private url: string;\r\n\r\n  constructor(url: string) {\r\n    this.url = url;\r\n  }\r\n\r\n  init = async (payload: InitPayload) => {\r\n    const response = await axios.post(this.url, payload, { headers });\r\n    return response.data;\r\n  };\r\n\r\n  update = async (state: GameState, playerNumber?: number) => {\r\n    const params = { playerNumber };\r\n    const response = await axios.post(this.url, state, { headers, params });\r\n    return response.data;\r\n  };\r\n\r\n  end = async (state: GameState) => {\r\n    await axios.post(this.url, state, { headers });\r\n  };\r\n}\r\n\r\nexport const RestControllerSelector: ControllerSelector = ({ onChange }) => {\r\n  const onChangeCallback = useCallback(\r\n    (e) => {\r\n      if (onChange) {\r\n        onChange(e.target.value);\r\n      }\r\n    },\r\n    [onChange]\r\n  );\r\n  return (\r\n    <Form.Item label=\"Address\">\r\n      <Input prefix={<GlobalOutlined />} onChange={onChangeCallback} />\r\n    </Form.Item>\r\n  );\r\n};\r\n\r\nexport const RestControllerFactory: ControllerFactory = {\r\n  Selector: RestControllerSelector,\r\n  create: (value) => new RestController(value),\r\n  label: \"REST\",\r\n};\r\n","import React from \"react\";\r\nimport { GameState, Move } from \"../engine/types\";\r\n\r\nexport type InitPayload = {\r\n  gameId: string;\r\n  gridSize: number;\r\n  playerCount: number;\r\n  playerNumber: number;\r\n};\r\n\r\nexport interface Controller {\r\n  init: (initPayload: InitPayload) => Promise<void>;\r\n  update: (state: GameState, playerNumber?: number) => Promise<Move>;\r\n  end: (state: GameState) => Promise<void>;\r\n}\r\n\r\nexport type ControllerSelector =\r\n  React.FunctionComponent<ControllerSelectorProps>;\r\n\r\nexport interface ControllerFactory {\r\n  Selector: ControllerSelector;\r\n  create: (value: string) => Controller;\r\n  label: string;\r\n}\r\n\r\nexport type ControllerSelectorProps = {\r\n  onChange?: (value: string) => void;\r\n};\r\n\r\nexport const isController = (\r\n  controller: Controller | undefined\r\n): controller is Controller => {\r\n  return !!controller;\r\n};\r\n","import { Button, Divider, Form, Space, Tooltip } from \"antd\";\r\nimport { uniqueId } from \"lodash\";\r\nimport React, { useCallback, useMemo, useState } from \"react\";\r\nimport { DeleteOutlined, PlusOutlined } from \"@ant-design/icons\";\r\nimport { RestControllerFactory } from \"../../controller/adapters/rest\";\r\nimport { Controller, ControllerFactory, isController } from \"../../controller/types\";\r\n\r\nexport type ControllerCreatorProps = {\r\n  onControllerChange: (controllers: Controller[]) => void;\r\n  onNext: () => void;\r\n};\r\n\r\nconst availableFactories: ControllerFactory[] = [RestControllerFactory];\r\n\r\nexport const ControllerCreator: React.FunctionComponent<ControllerCreatorProps> =\r\n  ({ onControllerChange, onNext }) => {\r\n    const [factoriesWithID, setFactoriesWithID] = useState<\r\n      Array<{ key: string; factory: ControllerFactory }>\r\n    >([]);\r\n    const controllers: Array<Controller | undefined> = useMemo(() => [], []);\r\n\r\n    const selectorChange = useCallback(\r\n      (pos) => (value: string) => {\r\n        controllers[pos] = factoriesWithID[pos].factory.create(value);\r\n        onControllerChange(controllers.filter(isController));\r\n      },\r\n      [onControllerChange, controllers, factoriesWithID]\r\n    );\r\n\r\n    const selectorFields = useMemo(\r\n      () =>\r\n        factoriesWithID.map(({ key, factory }, pos) => (\r\n          <Space style={{ display: \"flex\" }} align=\"baseline\" key={key}>\r\n            <factory.Selector onChange={selectorChange(pos)} />\r\n            <Button\r\n              type=\"text\"\r\n              icon={<DeleteOutlined />}\r\n              onClick={() => {\r\n                setFactoriesWithID(\r\n                  factoriesWithID.filter(({ key: k }) => k !== key)\r\n                );\r\n                controllers[pos] = undefined;\r\n                onControllerChange(controllers.filter(isController));\r\n              }}\r\n            />\r\n          </Space>\r\n        )),\r\n      [\r\n        factoriesWithID,\r\n        setFactoriesWithID,\r\n        controllers,\r\n        selectorChange,\r\n        onControllerChange,\r\n      ]\r\n    );\r\n\r\n    const selectorCreateButtons = useMemo(() => {\r\n      return availableFactories.map((factory, pos) => {\r\n        return (\r\n          <Button\r\n            key={pos}\r\n            type=\"dashed\"\r\n            icon={<PlusOutlined />}\r\n            onClick={() => {\r\n              setFactoriesWithID([\r\n                ...factoriesWithID,\r\n                { key: uniqueId(factory.label), factory },\r\n              ]);\r\n            }}\r\n          >\r\n            Add {factory.label} controller\r\n          </Button>\r\n        );\r\n      });\r\n    }, [factoriesWithID, setFactoriesWithID]);\r\n\r\n    return (\r\n      <>\r\n        <Form>{selectorFields}</Form>\r\n        <Space>{selectorCreateButtons}</Space>\r\n        <Divider />\r\n        <Tooltip\r\n          title=\"You must specifiy at least 2 controllers\"\r\n          placement=\"right\"\r\n        >\r\n          <Button\r\n            type=\"primary\"\r\n            onClick={onNext}\r\n            disabled={controllers.length < 2}\r\n          >\r\n            Next\r\n          </Button>\r\n        </Tooltip>\r\n      </>\r\n    );\r\n  };\r\n","import { Alert, Button, Progress, ProgressProps, Space, Typography } from \"antd\";\r\nimport React from \"react\";\r\nimport { Controller } from \"../../controller/types\";\r\nimport { Game } from \"../../engine/game\";\r\nimport { GameHistory, GameOptions } from \"../../engine/types\";\r\n\r\nconst { Title } = Typography;\r\n\r\nexport type RunProps = {\r\n  controllers?: Controller[];\r\n  onPrev: () => void;\r\n  onNext: () => void;\r\n  options?: GameOptions;\r\n  gameComplete: (history: GameHistory) => void;\r\n};\r\n\r\nexport enum RunStage {\r\n  UNSET,\r\n  CONTROLLER_INIT,\r\n  ERROR_STATE,\r\n  GAME_RUN,\r\n  GAME_OVER,\r\n}\r\n\r\nexport type RunState = {\r\n  errorTitle?: string;\r\n  errorDesc?: string;\r\n  game?: Game;\r\n  runStage: RunStage;\r\n  history?: GameHistory;\r\n  tickProgress: number;\r\n};\r\n\r\nexport class Run extends React.Component<RunProps, RunState> {\r\n  constructor(props: RunProps) {\r\n    super(props);\r\n    this.state = {\r\n      runStage: RunStage.UNSET,\r\n      tickProgress: 0,\r\n    };\r\n  }\r\n\r\n  componentDidUpdate(_: RunProps, prevState: RunState) {\r\n    if (prevState.runStage !== this.state.runStage) {\r\n      this.stateUpdate();\r\n    }\r\n  }\r\n\r\n  onTickUpdate = (tick: number) => {\r\n    const { options } = this.props;\r\n    if (!options) {\r\n      return;\r\n    }\r\n    const tickProgress = Math.round((tick / options.maxTicks) * 100);\r\n    this.setState({ tickProgress });\r\n  };\r\n\r\n  componentDidMount() {\r\n    const { controllers, options } = this.props;\r\n\r\n    if (!controllers || !controllers.length || !options) {\r\n      this.setState({\r\n        runStage: RunStage.ERROR_STATE,\r\n        errorTitle: \"Missing controllers or options?\",\r\n        errorDesc:\r\n          JSON.stringify(controllers, null, 2) +\r\n          \"\\n\" +\r\n          JSON.stringify(options, null, 2),\r\n      });\r\n      return;\r\n    }\r\n\r\n    const game = new Game(controllers, options, this.onTickUpdate);\r\n    this.setState({ game, runStage: RunStage.CONTROLLER_INIT });\r\n  }\r\n\r\n  onCancel = () => {\r\n    this.props.onPrev();\r\n  };\r\n\r\n  stateUpdate = (g?: Game) => {\r\n    const { runStage, game } = this.state;\r\n    if (!game) {\r\n      this.setState({\r\n        runStage: RunStage.ERROR_STATE,\r\n        errorTitle: \"No game object available\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    switch (runStage) {\r\n      case RunStage.CONTROLLER_INIT:\r\n        game\r\n          .initControllers()\r\n          .then(() => {\r\n            this.setState({ runStage: RunStage.GAME_RUN });\r\n          })\r\n          .catch((err) => {\r\n            this.setState({\r\n              runStage: RunStage.ERROR_STATE,\r\n              errorTitle: \"Error initialising controllers\",\r\n              errorDesc: err.message,\r\n            });\r\n          });\r\n        break;\r\n      case RunStage.GAME_RUN:\r\n        game\r\n          .run()\r\n          .then((history) => {\r\n            this.props.gameComplete(history);\r\n            this.setState({\r\n              runStage: RunStage.GAME_OVER,\r\n              history,\r\n            });\r\n            this.props.onNext();\r\n          })\r\n          .catch((err) => {\r\n            this.setState({\r\n              runStage: RunStage.ERROR_STATE,\r\n              errorTitle: \"Error running game\",\r\n              errorDesc: err.message,\r\n            });\r\n          });\r\n        break;\r\n    }\r\n  };\r\n\r\n  statusMessage = () => {\r\n    const { runStage, errorDesc, errorTitle } = this.state;\r\n    switch (runStage) {\r\n      case RunStage.CONTROLLER_INIT:\r\n        return <Title level={3}>Initialising controllers...</Title>;\r\n      case RunStage.ERROR_STATE:\r\n        return (\r\n          <Alert\r\n            message={errorTitle}\r\n            description={<pre>{errorDesc}</pre>}\r\n            type=\"error\"\r\n            showIcon\r\n          />\r\n        );\r\n      case RunStage.GAME_RUN:\r\n        return <Title level={3}>Running...</Title>;\r\n      case RunStage.GAME_OVER:\r\n        return <Title level={3}>Game complete!</Title>;\r\n      default:\r\n        return (\r\n          <Alert message=\"Game unset!? Contact dev\" type=\"warning\" showIcon />\r\n        );\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const body = this.statusMessage();\r\n\r\n    const { tickProgress, runStage } = this.state;\r\n    let progressStatus: ProgressProps[\"status\"] = \"normal\";\r\n    if (runStage === RunStage.GAME_RUN) {\r\n      progressStatus = \"active\";\r\n    } else if (runStage === RunStage.GAME_OVER) {\r\n      progressStatus = \"success\";\r\n    } else if (runStage === RunStage.ERROR_STATE) {\r\n      progressStatus = \"exception\";\r\n    }\r\n\r\n    return (\r\n      <>\r\n        <Space\r\n          direction=\"vertical\"\r\n          style={{\r\n            width: \"100%\",\r\n            justifyContent: \"center\",\r\n            alignItems: \"center\",\r\n          }}\r\n        >\r\n          {body}\r\n          <Progress\r\n            type=\"circle\"\r\n            percent={tickProgress}\r\n            status={progressStatus}\r\n          />\r\n          <br />\r\n          <Button size=\"large\" onClick={this.onCancel} danger>\r\n            Cancel\r\n          </Button>\r\n        </Space>\r\n      </>\r\n    );\r\n  }\r\n}\r\n","import { flatten, isEqual } from \"lodash\";\r\nimport { GameState, isPos, Pos } from \"./types\";\r\n\r\nexport class PositionPool {\r\n  private gameState: GameState;\r\n  private pool: Pos[];\r\n\r\n  constructor(gameState: GameState) {\r\n    this.gameState = gameState;\r\n    this.pool = this.generatePool();\r\n  }\r\n\r\n  private generatePool = () => {\r\n    const { positions, meta, food } = this.gameState;\r\n    const width = meta.gridSize;\r\n    const taken = flatten(positions).concat(food);\r\n    return new Array(width * width)\r\n      .fill(0)\r\n      .map((_, i) => [i % width, Math.floor(i / width)])\r\n      .filter((p) => taken.some((t) => !isEqual(t, p)))\r\n      .filter(isPos);\r\n  };\r\n\r\n  public next = () => {\r\n    const i = Math.floor(Math.random() * this.pool.length);\r\n    return this.pool.splice(i, 1)[0];\r\n  };\r\n\r\n  public empty = () => this.pool.length === 0;\r\n}\r\n","import { omit } from \"lodash\";\r\nimport { GameHistory, GameResult, GameState, Move, Pos } from \"./types\";\r\n\r\nexport const randomPos = (bounds: number): Pos => {\r\n  return [\r\n    Math.floor(Math.random() * bounds),\r\n    Math.floor(Math.random() * bounds),\r\n  ];\r\n};\r\n\r\nexport const moveToVector2d = (move: Move): [number, number] => {\r\n  const vecs: { [key: string]: [number, number] } = {\r\n    [Move.NORTH]: [0, -1],\r\n    [Move.SOUTH]: [0, 1],\r\n    [Move.EAST]: [1, 0],\r\n    [Move.WEST]: [-1, 0],\r\n  };\r\n  return vecs[move];\r\n};\r\n\r\nexport const withinBounds = (pos: Pos, bounds: number): boolean => {\r\n  return pos.every((p) => p >= 0 && p < bounds);\r\n};\r\n\r\nexport const gameHistorySummarise = (history: GameState[]): GameHistory => {\r\n  const lastFrame = history[history.length - 1];\r\n  const meta = lastFrame.meta;\r\n  const winnerCount = lastFrame.playerAlive.filter((p) => p).length;\r\n  const result =\r\n    winnerCount > 1\r\n      ? GameResult.TIMEOUT\r\n      : winnerCount === 1\r\n      ? GameResult.WINNER\r\n      : GameResult.DRAW;\r\n\r\n  const winner = lastFrame.playerAlive.findIndex((p) => p);\r\n  const ticks = history.map((h) => omit(h, [\"meta\"]));\r\n  const timeStamp = new Date().toISOString();\r\n  return {\r\n    ...meta,\r\n    tickCount: ticks.length,\r\n    ticks,\r\n    winner,\r\n    timeStamp,\r\n    result,\r\n  };\r\n};\r\n","import { notification } from \"antd\";\r\nimport { cloneDeep } from \"lodash\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport { Controller } from \"../controller/types\";\r\nimport { PositionPool } from \"./positionPool\";\r\nimport { GameOptions, GameState, isPos, Move, Pos } from \"./types\";\r\nimport { gameHistorySummarise, moveToVector2d, withinBounds } from \"./utils\";\r\n\r\nconst defaultOptions: GameOptions = {\r\n  gridSize: 50,\r\n  maxTicks: 1000,\r\n};\r\n\r\nexport class Game {\r\n  controllers: Controller[];\r\n  options: GameOptions;\r\n  gameState: GameState;\r\n  controllersReady: boolean[];\r\n  onGameTick: (tick: number) => void;\r\n\r\n  constructor(\r\n    controllers: Controller[],\r\n    options?: GameOptions,\r\n    onGameTick?: (tick: number) => void\r\n  ) {\r\n    this.controllers = controllers;\r\n    this.options = { ...defaultOptions, ...options };\r\n    this.gameState = this.initState(controllers, this.options);\r\n    this.controllersReady = new Array(controllers.length).fill(false);\r\n    this.onGameTick = onGameTick ?? (() => {});\r\n  }\r\n\r\n  public async initControllers() {\r\n    await Promise.all(\r\n      this.controllers.map(async (c, i) => {\r\n        await c.init({\r\n          playerNumber: i,\r\n          gameId: this.gameState.meta.gameId,\r\n          gridSize: this.gameState.meta.gridSize,\r\n          playerCount: this.gameState.meta.playerCount,\r\n        });\r\n        this.controllersReady[i] = true;\r\n      })\r\n    );\r\n  }\r\n\r\n  public async run() {\r\n    if (!this.controllersReady.every((r) => r)) {\r\n      throw new Error(\r\n        \"Controllers are not ready. \" + JSON.stringify(this.controllersReady)\r\n      );\r\n    }\r\n\r\n    const allStates: GameState[] = [];\r\n    while (\r\n      this.gameState.playerAlive.filter((p) => p).length > 1 &&\r\n      this.gameState.tick < this.options.maxTicks\r\n    ) {\r\n      const copy = cloneDeep(this.gameState);\r\n      allStates.push(copy);\r\n      await this.update();\r\n      this.onGameTick(this.gameState.tick);\r\n    }\r\n    const copy = cloneDeep(this.gameState);\r\n    allStates.push(copy);\r\n    this.onGameTick(this.gameState.tick);\r\n    return gameHistorySummarise(allStates);\r\n  }\r\n\r\n  private initState(\r\n    controllers: Controller[],\r\n    options: GameOptions\r\n  ): GameState {\r\n    const playerCount = controllers.length;\r\n    const newState: GameState = {\r\n      tick: 0,\r\n      positions: [],\r\n      lastMoves: [],\r\n      food: [],\r\n      playerAlive: new Array(playerCount).fill(true),\r\n      meta: {\r\n        playerCount,\r\n        gameId: uuidv4(),\r\n        gridSize: options.gridSize,\r\n      },\r\n    };\r\n\r\n    const posPool = new PositionPool(newState);\r\n\r\n    newState.positions = new Array(playerCount)\r\n      .fill(null)\r\n      .map(() => [posPool.next()]);\r\n    newState.food = new Array(playerCount).fill(null).map(() => posPool.next());\r\n    return newState;\r\n  }\r\n\r\n  public async update() {\r\n    const controllerMoves = await Promise.all(\r\n      this.controllers.map(\r\n        async (c, i) => await c.update(this.gameState, i).catch(() => null)\r\n      )\r\n    );\r\n\r\n    const newState = this.apply(this.gameState, controllerMoves);\r\n    this.gameState = newState;\r\n    return this.gameState;\r\n  }\r\n\r\n  private apply(\r\n    oldState: GameState,\r\n    controllerMoves: (Move | null)[]\r\n  ): GameState {\r\n    const newState = { ...oldState };\r\n\r\n    newState.tick = oldState.tick + 1;\r\n\r\n    const newHeads = controllerMoves.map((move, player) => {\r\n      if (move === null) {\r\n        notification.error({\r\n          message: `Player ${player} disqualified`,\r\n          description: `Player ${player} has been disqualified. Either the controller has crashed or it returned an invalid move.`,\r\n          duration: 0,\r\n        });\r\n        newState.playerAlive[player] = false;\r\n        return null;\r\n      }\r\n\r\n      if (!oldState.playerAlive[player]) {\r\n        return null;\r\n      }\r\n      newState.lastMoves[player] = move;\r\n      const currentHead = oldState.positions[player][0];\r\n      const moveVec = moveToVector2d(move);\r\n      return [currentHead[0] + moveVec[0], currentHead[1] + moveVec[1]] as Pos;\r\n    });\r\n\r\n    // Check out of bounds\r\n    newHeads.forEach((head, player) => {\r\n      if (head === null) {\r\n        return;\r\n      }\r\n      if (!withinBounds(head, newState.meta.gridSize)) {\r\n        newState.playerAlive[player] = false;\r\n      }\r\n    });\r\n\r\n    // Check head collisions\r\n    newHeads.forEach((head, player) => {\r\n      if (head === null) {\r\n        return;\r\n      }\r\n      const collides = newHeads\r\n        .filter((p) => p !== null && p[0] === head[0] && p[1] === head[1])\r\n        .filter(isPos).length;\r\n\r\n      // Collides with more than self\r\n      if (collides > 1) {\r\n        newState.playerAlive[player] = false;\r\n      }\r\n    });\r\n\r\n    // Eat or shrink\r\n    const eatenFoodIndex: Set<number> = new Set();\r\n    newHeads.forEach((head, player) => {\r\n      if (head === null) {\r\n        return;\r\n      }\r\n      const collides = newState.food.findIndex(\r\n        (p) => p !== null && p[0] === head[0] && p[1] === head[1]\r\n      );\r\n\r\n      if (collides !== -1) {\r\n        // Eats food\r\n        eatenFoodIndex.add(collides);\r\n      } else {\r\n        // Shrinks\r\n        newState.positions[player].pop();\r\n      }\r\n    });\r\n\r\n    // Detect head vs body collisions\r\n    const allBodies = newState.positions.flat();\r\n    newHeads.forEach((head, player) => {\r\n      if (head === null) {\r\n        return;\r\n      }\r\n      const collides = allBodies.findIndex(\r\n        (p) => p !== null && p[0] === head[0] && p[1] === head[1]\r\n      );\r\n      if (collides !== -1) {\r\n        newState.playerAlive[player] = false;\r\n      }\r\n    });\r\n\r\n    // Commit to new heads\r\n    newHeads.forEach((head, player) => {\r\n      if (head === null) {\r\n        return;\r\n      }\r\n      newState.positions[player].unshift(head);\r\n    });\r\n\r\n    // Replace eaten food\r\n    const positionPool = new PositionPool(newState);\r\n    newState.food = newState.food\r\n      .map((p, i) => {\r\n        if (eatenFoodIndex.has(i)) {\r\n          if (positionPool.empty()) {\r\n            return undefined;\r\n          }\r\n          return positionPool.next();\r\n        }\r\n        return p;\r\n      })\r\n      .filter(isPos);\r\n    return newState;\r\n  }\r\n}\r\n","import store from \"store\";\r\nimport { GameHistory } from \"../engine/types\";\r\n\r\nexport const enum StoreKeys {\r\n  HISTORIES = \"histories\",\r\n}\r\n\r\nexport const getHistories = (): GameHistory[] => {\r\n  const histories = store.get(StoreKeys.HISTORIES) || {};\r\n  return Object.values(histories as GameHistory[]).sort(\r\n    (a, b) => new Date(a.timeStamp).valueOf() - new Date(b.timeStamp).valueOf()\r\n  );\r\n};\r\n\r\nexport const addHistory = (history: GameHistory): void => {\r\n  const histories = store.get(StoreKeys.HISTORIES) || {};\r\n  store.set(StoreKeys.HISTORIES, { ...histories, [history.gameId]: history });\r\n};\r\n\r\nexport const removeHistory = (id: string): GameHistory[] => {\r\n  const histories = store.get(StoreKeys.HISTORIES) || {};\r\n  histories[id] = undefined;\r\n  store.set(StoreKeys.HISTORIES, histories);\r\n  return getHistories();\r\n};\r\n","import { Button, Form, InputNumber, Space } from \"antd\";\r\nimport React, { useCallback, useEffect } from \"react\";\r\nimport { GameOptions } from \"../../engine/types\";\r\n\r\nexport type GameSetupProps = {\r\n  onConfigChange: (options: GameOptions) => void;\r\n  onNext: () => void;\r\n  onPrev: () => void;\r\n};\r\n\r\nexport const GameSetup: React.FunctionComponent<GameSetupProps> = ({\r\n  onConfigChange,\r\n  onNext,\r\n  onPrev,\r\n}) => {\r\n  const [gridSize, setGridSize] = React.useState(50);\r\n  const [maxTicks, setMaxTicks] = React.useState(1000);\r\n\r\n  const changeCallback = useCallback(() => {\r\n    onConfigChange({\r\n      gridSize,\r\n      maxTicks,\r\n    });\r\n  }, [onConfigChange, gridSize, maxTicks]);\r\n\r\n  const onMaxTicksChange = useCallback(\r\n    (value: number) => {\r\n      setMaxTicks(value);\r\n      changeCallback();\r\n    },\r\n    [changeCallback, setMaxTicks]\r\n  );\r\n\r\n  const onGridSizeChange = useCallback(\r\n    (value: number) => {\r\n      setGridSize(value);\r\n      changeCallback();\r\n    },\r\n    [changeCallback, setGridSize]\r\n  );\r\n\r\n  useEffect(() => {\r\n    onConfigChange({\r\n      gridSize,\r\n      maxTicks,\r\n    });\r\n  }, [onConfigChange, gridSize, maxTicks]);\r\n\r\n  return (\r\n    <>\r\n      <Form>\r\n        <Form.Item label=\"Max ticks\">\r\n          <InputNumber\r\n            min={1}\r\n            max={10000}\r\n            defaultValue={1000}\r\n            value={maxTicks}\r\n            onChange={onMaxTicksChange}\r\n          />\r\n        </Form.Item>\r\n\r\n        <Form.Item label=\"Grid size\">\r\n          <InputNumber\r\n            min={10}\r\n            max={1000}\r\n            defaultValue={50}\r\n            value={gridSize}\r\n            onChange={onGridSizeChange}\r\n          />\r\n        </Form.Item>\r\n      </Form>\r\n\r\n      <Space>\r\n        <Button onClick={onPrev}>Previous</Button>\r\n        <Button type=\"primary\" onClick={onNext}>\r\n          Start\r\n        </Button>\r\n      </Space>\r\n    </>\r\n  );\r\n};\r\n","import { Steps, Typography } from \"antd\";\r\nimport React, { useCallback, useState } from \"react\";\r\nimport { Controller } from \"../../controller/types\";\r\nimport { GameHistory, GameOptions } from \"../../engine/types\";\r\nimport { ControllerCreator } from \"./ControllerCreator\";\r\nimport { Run } from \"./Run\";\r\nimport { GameSetup } from \"./Setup\";\r\nimport { Summary } from \"./Summary\";\r\n\r\nconst { Step } = Steps;\r\nconst { Title } = Typography;\r\n\r\nexport type GamePageProps = {};\r\n\r\nenum SetupStage {\r\n  CONTROLLER_CREATOR,\r\n  GAME_SETUP,\r\n  PLAYING,\r\n  SUMMARY,\r\n}\r\n\r\nexport const GameRunner: React.FunctionComponent<GamePageProps> = () => {\r\n  const [currentStage, setCurrentStage] = useState(\r\n    SetupStage.CONTROLLER_CREATOR\r\n  );\r\n\r\n  const [controllers, setControllers] = useState<Controller[]>([]);\r\n  const [options, setOptions] = useState<GameOptions | undefined>();\r\n  const [gameHistory, setGameHistory] = useState<GameHistory | undefined>();\r\n\r\n  const creatorCallback = useCallback(\r\n    (controllers) => {\r\n      setControllers(controllers);\r\n    },\r\n    [setControllers]\r\n  );\r\n\r\n  const onConfigChange = useCallback(\r\n    (options) => {\r\n      setOptions(options);\r\n    },\r\n    [setOptions]\r\n  );\r\n\r\n  const completeCallback = useCallback(\r\n    (history) => {\r\n      setGameHistory(history);\r\n    },\r\n    [setGameHistory]\r\n  );\r\n\r\n  const nextCallback = useCallback(() => {\r\n    setCurrentStage((currentStage + 1) % (SetupStage.SUMMARY + 1));\r\n  }, [currentStage, setCurrentStage]);\r\n  const prevCallback = useCallback(() => {\r\n    setCurrentStage((currentStage - 1) % (SetupStage.SUMMARY + 1));\r\n  }, [currentStage, setCurrentStage]);\r\n\r\n  return (\r\n    <>\r\n      <Title>Play a Game</Title>\r\n      <Steps current={currentStage}>\r\n        <Step title=\"Controller Creator\" />\r\n        <Step title=\"Game Setup\" />\r\n        <Step title=\"Running\" />\r\n        <Step title=\"Summary\" />\r\n      </Steps>\r\n\r\n      <br />\r\n      {currentStage === SetupStage.CONTROLLER_CREATOR && (\r\n        <ControllerCreator\r\n          onControllerChange={creatorCallback}\r\n          onNext={nextCallback}\r\n        />\r\n      )}\r\n      {currentStage === SetupStage.GAME_SETUP && (\r\n        <GameSetup\r\n          onConfigChange={onConfigChange}\r\n          onNext={nextCallback}\r\n          onPrev={prevCallback}\r\n        />\r\n      )}\r\n      {currentStage === SetupStage.PLAYING && (\r\n        <Run\r\n          controllers={controllers}\r\n          options={options}\r\n          onPrev={prevCallback}\r\n          onNext={nextCallback}\r\n          gameComplete={completeCallback}\r\n        />\r\n      )}\r\n      {currentStage === SetupStage.SUMMARY && (\r\n        <Summary gameHistory={gameHistory} onNext={nextCallback} />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n","import { GameHistory } from \"../engine/types\";\r\n\r\nexport const createDownloadHref = (gameHistory: GameHistory) => {\r\n  const jsonBlob = new Blob([JSON.stringify(gameHistory, null, 2)], {\r\n    type: \"text/json\",\r\n  });\r\n  const href = URL.createObjectURL(jsonBlob);\r\n  const download = `${gameHistory.timeStamp}.json`;\r\n\r\n  return {\r\n    href,\r\n    download,\r\n  };\r\n};\r\n","import { Button, Collapse, Divider, Result, Space, Typography } from \"antd\";\r\nimport React, { useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport {\r\n    DownloadOutlined, EyeOutlined, HourglassOutlined, MehOutlined, TrophyOutlined\r\n} from \"@ant-design/icons\";\r\nimport { GameHistory, GameResult } from \"../../engine/types\";\r\nimport { addHistory } from \"../../store\";\r\nimport { createDownloadHref } from \"../../store/download\";\r\n\r\nconst { Panel } = Collapse;\r\nconst { Paragraph } = Typography;\r\n\r\nexport type SummaryProps = {\r\n  gameHistory?: GameHistory;\r\n  onNext: () => void;\r\n};\r\n\r\nexport const Summary: React.FunctionComponent<SummaryProps> = (props) => {\r\n  const { gameHistory, onNext } = props;\r\n  useEffect(() => {\r\n    if (gameHistory) {\r\n      addHistory(gameHistory);\r\n    }\r\n  });\r\n  if (!gameHistory) {\r\n    return <div>Error: No game history specified</div>;\r\n  }\r\n\r\n  const downloadProps = createDownloadHref(gameHistory);\r\n\r\n  let result = (\r\n    <Result\r\n      icon={<TrophyOutlined />}\r\n      status=\"success\"\r\n      title={\"Player \" + gameHistory.winner + \" wins!\"}\r\n    />\r\n  );\r\n\r\n  if (gameHistory.result === GameResult.DRAW) {\r\n    result = <Result icon={<MehOutlined />} status=\"warning\" title={\"Draw!\"} />;\r\n  } else if (gameHistory.result === GameResult.TIMEOUT) {\r\n    result = (\r\n      <Result icon={<HourglassOutlined />} status=\"warning\" title={\"Timeout\"} />\r\n    );\r\n  }\r\n  return (\r\n    <>\r\n      {result}\r\n      <Space>\r\n        <Button onClick={onNext} type=\"primary\">\r\n          New game\r\n        </Button>\r\n        <Link to={`/viewer?gameId=${gameHistory?.gameId}`}>\r\n          <Button icon={<EyeOutlined />}>Show in viewer</Button>\r\n        </Link>\r\n        <Button icon={<DownloadOutlined />} {...downloadProps}>\r\n          Download replay\r\n        </Button>\r\n      </Space>\r\n\r\n      <Divider />\r\n\r\n      <Collapse>\r\n        <Panel header=\"Full Game History\" key=\"1\">\r\n          <Paragraph>\r\n            <pre>{JSON.stringify(gameHistory, null, 2)}</pre>\r\n          </Paragraph>\r\n        </Panel>\r\n      </Collapse>\r\n    </>\r\n  );\r\n};\r\n","import { Typography } from \"antd\";\r\nimport React from \"react\";\r\n\r\nconst { Title, Paragraph } = Typography;\r\n\r\nexport type HomePageProps = {};\r\n\r\nexport const HomePage: React.FunctionComponent<HomePageProps> = (props) => {\r\n  return (\r\n    <>\r\n      <Title>Snake Tron - Code Fights!</Title>\r\n\r\n      <Paragraph>What, you thought there would be content?</Paragraph>\r\n    </>\r\n  );\r\n};\r\n","import { Layout } from \"antd\";\r\nimport React from \"react\";\r\n\r\nconst { Content } = Layout;\r\n\r\nexport type ContentPartProps = {};\r\n\r\nexport const ContentPart: React.FunctionComponent<ContentPartProps> = (\r\n  props\r\n) => {\r\n  return <Content className=\"content\">{props.children}</Content>;\r\n};\r\n","import React from \"react\";\r\nimport { Layout } from \"antd\";\r\n\r\nconst { Footer } = Layout;\r\n\r\nexport const FooterPart: React.FunctionComponent = () => {\r\n  return (\r\n    <Footer className=\"footer\">\r\n      Created by <a href=\"http://samuel-lewis.com/\">Samuel Lewis</a>\r\n    </Footer>\r\n  );\r\n};\r\n","import { Layout, Menu } from \"antd\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst { Header } = Layout;\r\n\r\nexport const HeaderPart: React.FunctionComponent = () => {\r\n  return (\r\n    <Header className=\"header\">\r\n      <div className=\"logo\"></div>\r\n      <Menu theme=\"dark\" mode=\"horizontal\">\r\n        <Menu.Item key=\"home\">\r\n          <Link to=\"/\">Home</Link>\r\n        </Menu.Item>\r\n        <Menu.Item key=\"game\">\r\n          <Link to=\"/game\">Game</Link>\r\n        </Menu.Item>\r\n        <Menu.Item key=\"viewer\">\r\n          <Link to=\"/viewer\">Viewer</Link>\r\n        </Menu.Item>\r\n        <Menu.Item key=\"tester\">\r\n          <Link to=\"/tester\">Controller Tester</Link>\r\n        </Menu.Item>\r\n      </Menu>\r\n    </Header>\r\n  );\r\n};\r\n","import { Button, Col, Divider, Row, Tabs, Typography } from \"antd\";\r\nimport React, { useCallback, useState } from \"react\";\r\nimport { RestControllerFactory } from \"../controller/adapters/rest\";\r\nimport { Controller, InitPayload } from \"../controller/types\";\r\nimport { GameState, Move } from \"../engine/types\";\r\n\r\nconst { TabPane } = Tabs;\r\nconst { Title, Paragraph } = Typography;\r\n\r\nconst dummyId = \"48e2ee9e-171e-45bd-8904-a762d8e2b782\";\r\n\r\nconst sampleIniData: InitPayload = {\r\n  playerNumber: 1,\r\n  playerCount: 2,\r\n  gameId: dummyId,\r\n  gridSize: 50,\r\n};\r\n\r\nconst sampleStateData: GameState = {\r\n  tick: 2,\r\n  positions: [\r\n    [\r\n      [42, 31],\r\n      [41, 31],\r\n      [40, 31],\r\n    ],\r\n    [\r\n      [47, 27],\r\n      [47, 28],\r\n    ],\r\n  ],\r\n  lastMoves: [Move.NORTH, Move.SOUTH],\r\n  food: [\r\n    [35, 16],\r\n    [17, 6],\r\n  ],\r\n  playerAlive: [true, true],\r\n  meta: {\r\n    playerCount: 2,\r\n    gameId: dummyId,\r\n    gridSize: 50,\r\n  },\r\n};\r\n\r\nexport type ControllerTesterPageProps = {};\r\n\r\nexport const ControllerTesterPage: React.FunctionComponent<ControllerTesterPageProps> =\r\n  () => {\r\n    const [controller, setController] = useState<Controller | null>(null);\r\n    const [response, setResponse] = useState<string>(\"\");\r\n    const [sendData, setSendData] = useState<string>(\"\");\r\n\r\n    const loaderCallback = useCallback(\r\n      (value) => {\r\n        console.log(value);\r\n        setController(RestControllerFactory.create(value));\r\n      },\r\n      [setController]\r\n    );\r\n\r\n    const gameIniButton = useCallback(() => {\r\n      setSendData(JSON.stringify(sampleIniData, null, 2));\r\n      controller\r\n        ?.init(sampleIniData)\r\n        .then((r) => setResponse(JSON.stringify(r, null, 2)))\r\n        .catch((e) => setResponse(e.message));\r\n    }, [controller, setResponse]);\r\n\r\n    const stateSendButton = useCallback(() => {\r\n      setSendData(JSON.stringify(sampleStateData, null, 2));\r\n      controller\r\n        ?.update(sampleStateData, 1)\r\n        .then((r) => setResponse(JSON.stringify(r, null, 2)))\r\n        .catch((e) => setResponse(e.message));\r\n    }, [controller, setResponse]);\r\n\r\n    return (\r\n      <>\r\n        <Title>Controller Tester</Title>\r\n\r\n        <Tabs defaultActiveKey=\"1\">\r\n          <TabPane tab={RestControllerFactory.label} key=\"1\">\r\n            <RestControllerFactory.Selector onChange={loaderCallback} />\r\n          </TabPane>\r\n        </Tabs>\r\n\r\n        <Button onClick={gameIniButton}>Test game initialise</Button>\r\n        <Button onClick={stateSendButton}>Test game update</Button>\r\n\r\n        <Row gutter={16}>\r\n          <Col span={12}>\r\n            <Divider>Sent</Divider>\r\n            <Paragraph>{sendData && <pre>{sendData}</pre>}</Paragraph>\r\n          </Col>\r\n          <Col span={12}>\r\n            <Divider>Response</Divider>\r\n            <Paragraph>{response && <pre>{response}</pre>}</Paragraph>\r\n          </Col>\r\n        </Row>\r\n      </>\r\n    );\r\n  };\r\n","export const contrastColours = [\r\n  \"#e6194B\",\r\n  \"#3cb44b\",\r\n  \"#ffe119\",\r\n  \"#4363d8\",\r\n  \"#f58231\",\r\n  \"#911eb4\",\r\n  \"#42d4f4\",\r\n  \"#f032e6\",\r\n  \"#bfef45\",\r\n  \"#fabed4\",\r\n  \"#469990\",\r\n  \"#dcbeff\",\r\n  \"#9A6324\",\r\n  \"#fffac8\",\r\n  \"#800000\",\r\n  \"#aaffc3\",\r\n  \"#808000\",\r\n  \"#ffd8b1\",\r\n  \"#000075\",\r\n];\r\n\r\nexport const getColour = (number: number) => {\r\n  return contrastColours[number % contrastColours.length];\r\n};\r\n","import React, { useLayoutEffect, useRef } from \"react\";\r\nimport { MetalessGameState, Pos } from \"../engine/types\";\r\nimport { getColour } from \"../theme\";\r\n\r\nconst CANVAS_SIZE = 400;\r\n\r\nconst posToCanvas = ([x, y]: Pos, partSize: number) => {\r\n  return [x * partSize + partSize / 2, y * partSize + partSize / 2];\r\n};\r\n\r\nexport type CanvasProps = {\r\n  state: MetalessGameState;\r\n  gridSize: number;\r\n};\r\n\r\nconst clearCanvas = (ctx: CanvasRenderingContext2D) => {\r\n  ctx.clearRect(0, 0, CANVAS_SIZE, CANVAS_SIZE);\r\n  ctx.lineWidth = 1;\r\n  ctx.strokeRect(0, 0, CANVAS_SIZE, CANVAS_SIZE);\r\n};\r\n\r\nfunction drawSnake(\r\n  ctx: CanvasRenderingContext2D,\r\n  partSize: number,\r\n  snake: Pos[],\r\n  player: number\r\n) {\r\n  const colour = getColour(player);\r\n  const [headX, headY] = posToCanvas(snake[0], partSize);\r\n\r\n  ctx.lineWidth = partSize - 2;\r\n  ctx.strokeStyle = colour;\r\n  ctx.lineCap = \"square\";\r\n  ctx.beginPath();\r\n  ctx.moveTo(headX, headY);\r\n\r\n  snake.forEach((pos) => {\r\n    const [x, y] = posToCanvas(pos, partSize);\r\n    ctx.lineTo(x, y);\r\n  });\r\n\r\n  ctx.stroke();\r\n}\r\n\r\nconst drawFood = (\r\n  ctx: CanvasRenderingContext2D,\r\n  partSize: number,\r\n  pos: Pos\r\n) => {\r\n  const [x, y] = posToCanvas(pos, partSize);\r\n  ctx.fillStyle = \"green\";\r\n  ctx.beginPath();\r\n  ctx.arc(x, y, partSize / 2, 0, 2 * Math.PI);\r\n  ctx.fill();\r\n};\r\n\r\nexport const Canvas: React.FunctionComponent<CanvasProps> = (props) => {\r\n  const canvasRef = useRef<HTMLCanvasElement>(null);\r\n  const { state, gridSize } = props;\r\n\r\n  useLayoutEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    if (!canvas) {\r\n      return;\r\n    }\r\n\r\n    const ctx = canvas.getContext(\"2d\");\r\n    if (!ctx) {\r\n      return;\r\n    }\r\n\r\n    const partSize = CANVAS_SIZE / gridSize;\r\n\r\n    clearCanvas(ctx);\r\n\r\n    state.positions.forEach((player, i) => {\r\n      drawSnake(ctx, partSize, player, i);\r\n    });\r\n    state.food.forEach((pos) => drawFood(ctx, partSize, pos));\r\n  }, [canvasRef, state, gridSize]);\r\n\r\n  return <canvas width={CANVAS_SIZE} height={CANVAS_SIZE} ref={canvasRef} />;\r\n};\r\n","import { Table, Typography } from \"antd\";\r\nimport React from \"react\";\r\nimport { CheckCircleOutlined, CloseCircleOutlined } from \"@ant-design/icons\";\r\nimport { MetalessGameState } from \"../engine/types\";\r\nimport { getColour } from \"../theme\";\r\n\r\nconst { Paragraph } = Typography;\r\n\r\nexport type StateSnapshotProps = {\r\n  frame: MetalessGameState;\r\n  viewedPlayer?: (player: number) => void;\r\n};\r\n\r\nexport const StateSnapshot: React.FunctionComponent<StateSnapshotProps> = ({\r\n  frame,\r\n}) => {\r\n  if (!frame) {\r\n    return null;\r\n  }\r\n  const playerData = new Array(frame.playerAlive.length)\r\n    .fill(null)\r\n    .map((_, i) => {\r\n      return {\r\n        key: `Player ${i}`,\r\n        alive: frame.playerAlive[i],\r\n        lastMove: frame.lastMoves[i],\r\n        position: frame.positions[i],\r\n        playerNumber: i,\r\n      };\r\n    });\r\n\r\n  const columns = [\r\n    {\r\n      title: \"Player\",\r\n      dataIndex: \"playerNumber\",\r\n      key: \"playerNumber\",\r\n      render: (number: number) => {\r\n        return (\r\n          <>\r\n            <span\r\n              className=\"dot\"\r\n              style={{ backgroundColor: getColour(number) }}\r\n            ></span>\r\n            Player {number}\r\n          </>\r\n        );\r\n      },\r\n    },\r\n    {\r\n      title: \"Alive\",\r\n      dataIndex: \"alive\",\r\n      key: \"alive\",\r\n      render: (alive: boolean) =>\r\n        alive ? <CheckCircleOutlined /> : <CloseCircleOutlined />,\r\n    },\r\n    {\r\n      title: \"Last Move\",\r\n      dataIndex: \"lastMove\",\r\n      key: \"lastMove\",\r\n    },\r\n    {\r\n      title: \"Positions\",\r\n      dataIndex: \"position\",\r\n      key: \"position\",\r\n      render: (position: number) => JSON.stringify(position),\r\n      ellipsis: true,\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <>\r\n      <Paragraph>Tick: {frame.tick}</Paragraph>\r\n      <Paragraph>Food: {JSON.stringify(frame.food)}</Paragraph>\r\n      <Table\r\n        size=\"small\"\r\n        dataSource={playerData}\r\n        columns={columns}\r\n        pagination={false}\r\n        expandable={{\r\n          expandedRowRender: (record) => (\r\n            <p style={{ margin: 0 }}>{JSON.stringify(record.position)}</p>\r\n          ),\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n};\r\n","import { Col, Row, Slider } from \"antd\";\r\nimport React, { useCallback, useState } from \"react\";\r\nimport { GameHistory } from \"../engine/types\";\r\nimport { Canvas } from \"./Canvas\";\r\nimport { StateSnapshot } from \"./Snapshot\";\r\n\r\nexport type ViewerProps = {\r\n  history?: GameHistory;\r\n};\r\n\r\nexport const Viewer: React.FunctionComponent<ViewerProps> = (props) => {\r\n  const { history } = props;\r\n  const [tick, setTick] = useState(0);\r\n  const sliderChange = useCallback((value) => setTick(value), [setTick]);\r\n\r\n  if (!history) {\r\n    return <div>Error: No history loaded?!</div>;\r\n  }\r\n\r\n  return (\r\n    <Row justify=\"center\">\r\n      <Col span={12}>\r\n        <Canvas state={history.ticks[tick]} gridSize={history.gridSize} />\r\n        <Slider\r\n          style={{ width: \"400px\", marginLeft: 0, marginRight: 0 }}\r\n          value={tick}\r\n          min={0}\r\n          max={history.tickCount - 1}\r\n          onChange={sliderChange}\r\n        />\r\n      </Col>\r\n      <Col span={12}>\r\n        <StateSnapshot frame={history.ticks[tick]} />\r\n      </Col>\r\n    </Row>\r\n  );\r\n};\r\n","import { Button, Divider, message, Table, TableProps, Tag, Tooltip, Typography } from \"antd\";\r\nimport React, { useEffect, useMemo, useState } from \"react\";\r\nimport { Link, useLocation } from \"react-router-dom\";\r\nimport { DeleteOutlined, DownloadOutlined, EyeOutlined } from \"@ant-design/icons\";\r\nimport { GameHistory, GameResult } from \"../engine/types\";\r\nimport { getHistories, removeHistory } from \"../store\";\r\nimport { createDownloadHref } from \"../store/download\";\r\nimport { Viewer } from \"../viewer/Viewer\";\r\n\r\nconst { Title } = Typography;\r\n\r\nconst useQuery = () => {\r\n  return new URLSearchParams(useLocation().search);\r\n};\r\n\r\nexport type ViewerPageProps = {};\r\n\r\nexport const ViewerPage: React.FunctionComponent<ViewerPageProps> = () => {\r\n  const [savedGames, setSavedGames] = useState<GameHistory[]>(\r\n    getHistories().reverse()\r\n  );\r\n  const [loadedHistory, setLoadedHistory] = useState<GameHistory | undefined>();\r\n  const query = useQuery();\r\n\r\n  useEffect(() => {\r\n    const id = query.get(\"gameId\");\r\n    if (!id) {\r\n      return;\r\n    }\r\n\r\n    if (id === \"latest\") {\r\n      setLoadedHistory(savedGames[0]);\r\n      return;\r\n    }\r\n\r\n    const selected = savedGames.find((h) => h.gameId === id);\r\n    if (selected) {\r\n      setLoadedHistory(selected);\r\n      return;\r\n    }\r\n\r\n    message.error(`Could not find game ${id}`);\r\n  }, [savedGames, setLoadedHistory, query]);\r\n\r\n  const dataSource = useMemo(() => {\r\n    return savedGames.map((game) => {\r\n      return {\r\n        ...game,\r\n        key: game.gameId,\r\n      };\r\n    });\r\n  }, [savedGames]);\r\n\r\n  const columns: TableProps<GameHistory>[\"columns\"] = [\r\n    {\r\n      title: \"Timestamp\",\r\n      dataIndex: \"timeStamp\",\r\n      key: \"timeStamp\",\r\n      ellipsis: true,\r\n      sorter: {\r\n        compare: (a, b: GameHistory) =>\r\n          new Date(a.timeStamp).valueOf() - new Date(b.timeStamp).valueOf(),\r\n        multiple: 1,\r\n      },\r\n      render: (timeStamp: string) => {\r\n        return <span>{new Date(timeStamp).toString()}</span>;\r\n      },\r\n    },\r\n    {\r\n      title: \"Result\",\r\n      dataIndex: \"result\",\r\n      key: \"result\",\r\n      sorter: {\r\n        compare: (a: GameHistory, b: GameHistory) =>\r\n          a.result.localeCompare(b.result),\r\n        multiple: 2,\r\n      },\r\n      render(value: GameResult) {\r\n        const colour =\r\n          value === GameResult.WINNER\r\n            ? \"green\"\r\n            : value === GameResult.DRAW\r\n            ? \"blue\"\r\n            : \"red\";\r\n        return <Tag color={colour}>{value}</Tag>;\r\n      },\r\n    },\r\n    {\r\n      title: \"Winner\",\r\n      dataIndex: \"winner\",\r\n      key: \"winner\",\r\n      sorter: {\r\n        compare: (a: GameHistory, b: GameHistory) => a.winner - b.winner,\r\n        multiple: 3,\r\n      },\r\n    },\r\n    {\r\n      title: \"Player count\",\r\n      dataIndex: \"playerCount\",\r\n      key: \"playerCount\",\r\n      sorter: {\r\n        compare: (a: GameHistory, b: GameHistory) =>\r\n          a.playerCount - b.playerCount,\r\n        multiple: 4,\r\n      },\r\n    },\r\n    {\r\n      title: \"Tick count\",\r\n      dataIndex: \"tickCount\",\r\n      key: \"tickCount\",\r\n      sorter: {\r\n        compare: (a: GameHistory, b: GameHistory) => a.tickCount - b.tickCount,\r\n        multiple: 5,\r\n      },\r\n    },\r\n    {\r\n      title: \"Grid size\",\r\n      dataIndex: \"gridSize\",\r\n      key: \"gridSize\",\r\n      sorter: {\r\n        compare: (a: GameHistory, b: GameHistory) => a.gridSize - b.gridSize,\r\n        multiple: 6,\r\n      },\r\n    },\r\n    {\r\n      title: \"ID\",\r\n      dataIndex: \"gameId\",\r\n      key: \"gameId\",\r\n      ellipsis: true,\r\n      sorter: {\r\n        compare: (a: GameHistory, b: GameHistory) =>\r\n          a.gameId.localeCompare(b.gameId),\r\n        multiple: 7,\r\n      },\r\n    },\r\n    {\r\n      title: \"Actions\",\r\n      key: \"actions\",\r\n      render: (_, record: any) => {\r\n        const { key, humanDate, ...rest } = record;\r\n        const downloadProps = createDownloadHref(rest);\r\n        return (\r\n          <>\r\n            <Tooltip title=\"View\">\r\n              <Link to={`/viewer?gameId=${rest.gameId}`}>\r\n                <Button icon={<EyeOutlined />} />\r\n              </Link>\r\n            </Tooltip>\r\n\r\n            <Tooltip title=\"Download\">\r\n              <Button icon={<DownloadOutlined />} {...downloadProps} />\r\n            </Tooltip>\r\n            <Tooltip title=\"Delete\">\r\n              <Button\r\n                onClick={() => {\r\n                  removeHistory(record.gameId);\r\n                  setSavedGames(getHistories());\r\n                  if (loadedHistory && loadedHistory.gameId === record.gameId) {\r\n                    setLoadedHistory(undefined);\r\n                  }\r\n                }}\r\n                icon={<DeleteOutlined />}\r\n              />\r\n            </Tooltip>\r\n          </>\r\n        );\r\n      },\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <>\r\n      <Title>Game Viewer</Title>\r\n\r\n      {loadedHistory && <Viewer history={loadedHistory} />}\r\n\r\n      <Divider>Saved Rounds</Divider>\r\n      <Table\r\n        dataSource={dataSource}\r\n        columns={columns}\r\n        pagination={{\r\n          pageSize: 10,\r\n          position: [\"topRight\", \"bottomRight\"],\r\n          showTotal: (total) => `${total} games`,\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n};\r\n","import \"antd/dist/antd.css\";\nimport \"./App.less\";\nimport { Layout } from \"antd\";\nimport { Route, Switch } from \"react-router-dom\";\nimport { GameRunner } from \"./pages/game/GameRunner\";\nimport { HomePage } from \"./pages/Home\";\nimport { ContentPart } from \"./pages/parts/Content\";\nimport { FooterPart } from \"./pages/parts/Footer\";\nimport { HeaderPart } from \"./pages/parts/Header\";\nimport { ControllerTesterPage } from \"./pages/Tester\";\nimport { ViewerPage } from \"./pages/Viewer\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Layout className=\"layout\">\n        <HeaderPart />\n        <ContentPart>\n          <Switch>\n            <Route exact path=\"/\">\n              <HomePage />\n            </Route>\n            <Route path=\"/game\">\n              <GameRunner />\n            </Route>\n            <Route path=\"/viewer\">\n              <ViewerPage />\n            </Route>\n            <Route path=\"/tester\">\n              <ControllerTesterPage />\n            </Route>\n          </Switch>\n        </ContentPart>\n        <FooterPart />\n      </Layout>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { HashRouter } from \"react-router-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}