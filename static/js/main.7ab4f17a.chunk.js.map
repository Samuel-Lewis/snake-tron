{"version":3,"sources":["viewer/Canvas.tsx","engine/types.ts","viewer/Viewer.tsx","engine/utils.ts","engine/game.ts","sample-controllers/random.ts","App.tsx","index.tsx"],"names":["CANVAS_SIZE","drawPart","ctx","partSize","colour","x","y","fillStyle","fillRect","Move","Canvas","props","canvasRef","useRef","state","useLayoutEffect","canvas","current","getContext","gridSize","meta","clearRect","strokeRect","clearCanvas","positions","forEach","player","i","snake","pos","drawSnake","food","width","height","ref","Viewer","states","useState","tick","setTick","sliderChange","useCallback","e","target","value","type","min","max","length","onChange","JSON","stringify","randomPos","bounds","Math","floor","random","defaultOptions","maxTicks","Game","controllers","options","gameState","this","initState","initControllers","stateHistory","playerAlive","filter","p","cloneDeep","update","push","playerCount","newState","Array","fill","gameId","uuidv4","uniquePos","map","poss","controllerMoves","c","apply","oldState","move","currentHead","moveVec","NORTH","SOUTH","EAST","WEST","moveToVector2d","newHead","every","some","pop","unshift","RandomController","init","App","history","setHistory","useEffect","r1","r2","game","run","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7ab4f17a.chunk.js","sourcesContent":["import React, { useRef, useLayoutEffect } from \"react\";\r\nimport { GameState, Pos } from \"../engine/types\";\r\n\r\nconst CANVAS_SIZE = 400;\r\n\r\nexport type CanvasProps = {\r\n  state: GameState;\r\n};\r\n\r\nconst clearCanvas = (ctx: CanvasRenderingContext2D) => {\r\n  ctx.clearRect(0, 0, CANVAS_SIZE, CANVAS_SIZE);\r\n  ctx.strokeRect(0, 0, CANVAS_SIZE, CANVAS_SIZE);\r\n};\r\n\r\nfunction drawPart(\r\n  ctx: CanvasRenderingContext2D,\r\n  partSize: number,\r\n  [x, y]: Pos,\r\n  colour: string\r\n) {\r\n  ctx.fillStyle = colour;\r\n  ctx.fillRect(x * partSize, y * partSize, partSize, partSize);\r\n}\r\n\r\nfunction drawSnake(\r\n  ctx: CanvasRenderingContext2D,\r\n  partSize: number,\r\n  snake: Pos[],\r\n  player: number\r\n) {\r\n  const colour = \"red\";\r\n  snake.forEach((pos) => drawPart(ctx, partSize, pos, colour));\r\n}\r\n\r\nexport const Canvas: React.FunctionComponent<CanvasProps> = (props) => {\r\n  const canvasRef = useRef<HTMLCanvasElement>(null);\r\n  const { state } = props;\r\n\r\n  useLayoutEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    if (!canvas) {\r\n      return;\r\n    }\r\n\r\n    const ctx = canvas.getContext(\"2d\");\r\n    if (!ctx) {\r\n      return;\r\n    }\r\n\r\n    const gridSize = state.meta.gridSize;\r\n    const partSize = CANVAS_SIZE / gridSize;\r\n\r\n    clearCanvas(ctx);\r\n    state.positions.forEach((player, i) => {\r\n      drawSnake(ctx, partSize, player, i);\r\n    });\r\n    state.food.forEach((pos) => drawPart(ctx, partSize, pos, \"green\"));\r\n  }, [canvasRef, state]);\r\n\r\n  return (\r\n    <canvas\r\n      width={CANVAS_SIZE}\r\n      height={CANVAS_SIZE}\r\n      ref={canvasRef}\r\n      {...props}\r\n    />\r\n  );\r\n};\r\n","export type GameOptions = {\r\n  gridSize: number;\r\n  maxTicks: number;\r\n};\r\n\r\nexport type GameOptionsOptionals = {};\r\n\r\nexport enum Move {\r\n  NORTH = \"N\",\r\n  SOUTH = \"S\",\r\n  EAST = \"E\",\r\n  WEST = \"W\",\r\n}\r\n\r\nexport type Pos = [number, number];\r\n\r\nexport type GameState = {\r\n  tick: number;\r\n  positions: Array<Pos[]>;\r\n  food: Pos[];\r\n  playerAlive: boolean[];\r\n  meta: {\r\n    gridSize: number;\r\n    playerCount: number;\r\n    gameId: string;\r\n  };\r\n};\r\n\r\nexport interface Controller {\r\n  name?: string;\r\n  init: (state: GameState) => void;\r\n  update: (state: GameState) => Move;\r\n}\r\n","import React, { useState, useCallback } from \"react\";\r\nimport { Canvas } from \"./Canvas\";\r\nimport { GameState } from \"../engine/types\";\r\n\r\nexport type ViewerProps = {\r\n  states?: GameState[];\r\n};\r\n\r\nexport const Viewer: React.FunctionComponent<ViewerProps> = (props) => {\r\n  const { states } = props;\r\n  const [tick, setTick] = useState(0);\r\n  const sliderChange = useCallback(\r\n    (e) => {\r\n      setTick(e.target.value);\r\n    },\r\n    [setTick]\r\n  );\r\n\r\n  if (!states) {\r\n    return <div>No states loaded</div>;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Canvas state={states[tick]} />\r\n      <input\r\n        type=\"range\"\r\n        value={tick}\r\n        min={0}\r\n        max={states.length - 1}\r\n        onChange={sliderChange}\r\n      />\r\n      <div>Tick: {tick}</div>\r\n      <hr />\r\n      <pre>{JSON.stringify(states[tick], null, 2)}</pre>\r\n    </div>\r\n  );\r\n};\r\n","import { Pos, Move } from \"./types\";\r\n\r\nexport const randomPos = (bounds: number): Pos => {\r\n  return [\r\n    Math.floor(Math.random() * bounds),\r\n    Math.floor(Math.random() * bounds),\r\n  ];\r\n};\r\n\r\nexport const moveToVector2d = (move: Move): [number, number] => {\r\n  const vecs: { [key: string]: [number, number] } = {\r\n    [Move.NORTH]: [0, -1],\r\n    [Move.SOUTH]: [0, 1],\r\n    [Move.EAST]: [1, 0],\r\n    [Move.WEST]: [-1, 0],\r\n  };\r\n  return vecs[move];\r\n};\r\n\r\nexport const withinBounds = (pos: Pos, bounds: number): boolean => {\r\n  return pos.every((p) => p >= 0 && p < bounds);\r\n};\r\n","import { v4 as uuidv4 } from \"uuid\";\r\nimport { cloneDeep } from \"lodash\";\r\n\r\nimport { Controller, GameOptions, GameState, Pos, Move } from \"./types\";\r\nimport { moveToVector2d, randomPos, withinBounds } from \"./utils\";\r\n\r\nconst defaultOptions: GameOptions = {\r\n  gridSize: 50,\r\n  maxTicks: 1000,\r\n};\r\n\r\nexport class Game {\r\n  controllers: Controller[];\r\n  options: GameOptions;\r\n  gameState: GameState;\r\n\r\n  constructor(controllers: Controller[], options?: GameOptions) {\r\n    this.controllers = controllers;\r\n    this.options = { ...defaultOptions, ...options };\r\n    this.gameState = this.initState(controllers, this.options);\r\n    this.initControllers(this.gameState);\r\n  }\r\n\r\n  public run() {\r\n    const stateHistory: GameState[] = [];\r\n    while (\r\n      this.gameState.playerAlive.filter((p) => p).length > 1 &&\r\n      this.gameState.tick < this.options.maxTicks\r\n    ) {\r\n      const state = cloneDeep(this.update());\r\n      stateHistory.push(state);\r\n    }\r\n    return stateHistory;\r\n  }\r\n\r\n  private initControllers(gameState: GameState) {}\r\n\r\n  private initState(\r\n    controllers: Controller[],\r\n    options: GameOptions\r\n  ): GameState {\r\n    const playerCount = controllers.length;\r\n    const newState: GameState = {\r\n      tick: 0,\r\n      positions: [],\r\n      food: [],\r\n      playerAlive: new Array(playerCount).fill(true),\r\n      meta: {\r\n        playerCount,\r\n        gameId: uuidv4(),\r\n        gridSize: options.gridSize,\r\n      },\r\n    };\r\n\r\n    newState.positions = this.uniquePos(newState, playerCount).map((p) => [p]);\r\n    newState.food = this.uniquePos(newState, playerCount);\r\n    return newState;\r\n  }\r\n\r\n  private uniquePos(gameState: GameState, positions: number = 1): Pos[] {\r\n    const poss: Pos[] = [];\r\n\r\n    // TODO: actually ensure unique positions\r\n    for (let i = 0; i < positions; i++) {\r\n      const p = randomPos(gameState.meta.gridSize);\r\n      poss.push(p);\r\n    }\r\n\r\n    return poss;\r\n  }\r\n\r\n  public update() {\r\n    const controllerMoves = this.controllers.map((c) =>\r\n      c.update(this.gameState)\r\n    );\r\n\r\n    const newState = this.apply(this.gameState, controllerMoves);\r\n    this.gameState = newState;\r\n    return this.gameState;\r\n  }\r\n\r\n  private apply(oldState: GameState, controllerMoves: Move[]): GameState {\r\n    const newState = { ...oldState };\r\n\r\n    newState.tick = oldState.tick + 1;\r\n\r\n    controllerMoves.forEach((move, player) => {\r\n      const currentHead = oldState.positions[player][0];\r\n      const moveVec = moveToVector2d(move);\r\n      const newHead = [\r\n        currentHead[0] + moveVec[0],\r\n        currentHead[1] + moveVec[1],\r\n      ] as Pos;\r\n\r\n      // Check bounds collision\r\n      if (!withinBounds(newHead, newState.meta.gridSize)) {\r\n        newState.playerAlive[player] = false;\r\n        return;\r\n      }\r\n\r\n      // Check part collision\r\n      const collided = oldState.positions.some((pos) => {\r\n        return pos.some(([x, y]) => x === newHead[0] && y === newHead[1]);\r\n      });\r\n\r\n      if (collided) {\r\n        newState.playerAlive[player] = false;\r\n        return;\r\n      }\r\n\r\n      // Check food collision\r\n      const ateFood = oldState.food.some((pos) => {\r\n        if (pos[0] === newHead[0] && pos[1] === newHead[1]) {\r\n          newState.food = newState.food.filter((p) => p !== pos);\r\n          return true;\r\n        }\r\n        return false;\r\n      });\r\n\r\n      if (!ateFood) {\r\n        newState.positions[player].pop();\r\n      }\r\n      newState.positions[player].unshift(newHead);\r\n    });\r\n\r\n    // Repopulate food\r\n    newState.food.push(\r\n      ...this.uniquePos(\r\n        newState,\r\n        newState.meta.playerCount - newState.food.length\r\n      )\r\n    );\r\n\r\n    return newState;\r\n  }\r\n}\r\n","import { Controller, GameState, Move } from \"../engine/types\";\r\n\r\nexport class RandomController implements Controller {\r\n  init = () => {};\r\n  update = (state: GameState) => {\r\n    return Move.NORTH;\r\n  };\r\n}\r\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\n\nimport { Viewer } from \"./viewer/Viewer\";\nimport { GameState } from \"./engine/types\";\nimport { Game } from \"./engine/game\";\nimport { RandomController } from \"./sample-controllers/random\";\n\nfunction App() {\n  const [history, setHistory] = useState([] as GameState[]);\n\n  useEffect(() => {\n    const r1 = new RandomController();\n    const r2 = new RandomController();\n    const game = new Game([r1, r2]);\n    setHistory(game.run());\n  }, [setHistory]);\n\n  return (\n    <div className=\"App\">\n      <h1>🐍🏍️</h1>\n      {history.length > 0 && <Viewer states={history} />}\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}